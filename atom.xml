<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>little-byte写字台</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://little-byte.com/"/>
  <updated>2017-03-03T11:04:17.000Z</updated>
  <id>http://little-byte.com/</id>
  
  <author>
    <name>littlebyte</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Tinker调研</title>
    <link href="http://little-byte.com/2017/02/28/Tinker%E8%B0%83%E7%A0%94/"/>
    <id>http://little-byte.com/2017/02/28/Tinker调研/</id>
    <published>2017-02-28T10:55:58.000Z</published>
    <updated>2017-03-03T11:04:17.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Tinker与其他热修复框架对比"><a href="#Tinker与其他热修复框架对比" class="headerlink" title="Tinker与其他热修复框架对比"></a>Tinker与其他热修复框架对比</h2><p><img src="http://om2bpqram.bkt.clouddn.com/1488428148337.jpg" alt=""></p>
<p><strong>总结</strong>：</p>
<ol>
<li><strong>阿里的AndFix</strong>作为native解决方案，首先面临的是稳定性与兼容性问题，更重要的是它无法实现类替换，它是需要大量额外的开发成本的；</li>
<li><strong>美团的Robust</strong>兼容性与成功率最高，但是它与AndFix一样，无法新增变量与类只能用做的bugFix方案，并且尚未开源，不过有参照Robust的install run原理实现的<a href="https://github.com/fourbrother/Robust" target="_blank" rel="external">开源方案</a>，不过较少人关注，实际效果未知。</li>
<li><strong>百度金融的RocooFix</strong>是Nuwa方案的改良版，增加了lib替换和即时生效支持，但是不支持在windows平台生成补丁，兼容性还有待测试。</li>
<li><strong>饿了么的Amigo</strong>是非常强大的一个方案，不仅是类替换，lib替换，资源替换都支持，同时也支持新增四大组件，缺点是不支持Android 3.0 ，notification &amp; widget中RemoteViews的自定义布局不支持修改,只支持内容修复。</li>
</ol>
<p>Amigo官方wiki介绍</p>
<blockquote>
<p>Amigo 原理与 QQZone<br>的方案有些类似，QQZone,Tinker,Nuwa这类方案是通过修改PathClassLoader中的dex实现的，Amigo则是釜底抽薪直接替换ClassLoader。同时进一步实现了<br>so 文件、资源文件、四大组件的修复，可以对APP全面进行修复</p>
</blockquote>
<ol>
<li><strong>微信的Tinker</strong>是各方面都比较优秀的方案，毕竟经过了几亿微信用户的验证。Tinker的优点上图已经很明确了，而存在的缺陷有以下几方面：</li>
</ol>
<ul>
<li>Tinker不支持修改AndroidManifest.xml，Tinker不支持新增四大组件；  </li>
<li>由于Google Play的开发者条款限制，不建议在GP渠道动态更新代码；</li>
<li>在Android N上，补丁对应用启动时间有轻微的影响；</li>
<li>不支持部分三星android-21机型，加载补丁时会主动抛出”TinkerRuntimeException:checkDexInstall failed”；</li>
<li>由于各个厂商的加固实现并不一致，在1.7.6以及之后的版本，tinker不再支持加固的动态更新；（由于360电子市场必须经过加固应用才能上架，因此可以说tinker无法在360渠道上的apk实现热更新）</li>
<li>对于资源替换，不支持修改remoteView。例如transition动画，notification icon以及桌面图标。</li>
<li>与超级补丁技术一样，不支持即时生效，必须通过重启应用的方式才能生效。</li>
<li>需要给应用开启新的进程才能进行合并，并且很容易因为内存消耗等原因合并失败。</li>
<li>合并时占用额外磁盘空间，对于多DEX的应用来说，如果修改了多个DEX文件，就需要下发多个patch.dex与对应的classes.dex进行合并操作时这种情况会更严重，因此合并过程的失败率也会更高。</li>
<li>接入tinker sdk略微复杂</li>
</ul>
<h2 id="Tinker接入"><a href="#Tinker接入" class="headerlink" title="Tinker接入"></a>Tinker接入</h2><h3 id="1-添加gradle依赖"><a href="#1-添加gradle依赖" class="headerlink" title="1. 添加gradle依赖"></a>1. 添加gradle依赖</h3><ol>
<li>首先在项目的<strong>gradle.properties</strong>文件指定Tinker版本，这样只需修改此处版本号就能更改Tinker版本。加入以下属性：</li>
</ol>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">TINKER_VERSION</span>=<span class="number">1.7</span>.<span class="number">7</span></div></pre></td></tr></table></figure>
<ol>
<li>在项目的<strong>build.gradle</strong>中，添加<em>tinker-patch-gradle-plugin</em>的依赖</li>
</ol>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">classpath</span> <span class="string">"com.tencent.tinker:tinker-patch-gradle-plugin:<span class="variable">$&#123;TINKER_VERSION&#125;</span>"</span></div></pre></td></tr></table></figure>
<ol>
<li>然后在app的gradle文件<strong>app/build.gradle</strong>，我们需要添加tinker的库依赖以及apply tinker的gradle插件.</li>
</ol>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">compile(<span class="string">"com.tencent.tinker:tinker-android-lib:<span class="subst">$&#123;TINKER_VERSION&#125;</span>"</span>) &#123; <span class="attr">changing</span> = <span class="literal">true</span> &#125;</div><div class="line">provided(<span class="string">"com.tencent.tinker:tinker-android-anno:<span class="subst">$&#123;TINKER_VERSION&#125;</span>"</span>) &#123; <span class="attr">changing</span> = <span class="literal">true</span> &#125;</div></pre></td></tr></table></figure>
<p>其中，<strong>tinker-android-anno</strong>用于注解生成application类<br><strong>tinker-android-lib</strong>为tinker的核心库</p>
<ol>
<li>在app的gradle文件<strong>app/build.gradle</strong>配置<strong>tinkerPatch task</strong>，下面给出简单的示例：<br>//全局信息相关的配置项</li>
</ol>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">tinkerPatch &#123;</div><div class="line">    <span class="comment">//有问题的apk的地址  准apk包的路径，必须输入，否则会报错</span></div><div class="line">    oldApk = <span class="string">"/Users/littlebyte/AndroidStudioProjects/TInkerTest/app/oldApk/app-debug.apk"</span></div><div class="line">    <span class="comment">//</span></div><div class="line">    ignoreWarning = <span class="literal">false</span></div><div class="line">    <span class="comment">//在运行过程中，需要验证基准apk包与补丁包的签名是否一致，我们是否需要为你签名</span></div><div class="line">    useSign = <span class="literal">true</span></div><div class="line">    <span class="comment">//编译相关的配置项</span></div><div class="line">    buildConfig &#123;</div><div class="line">        <span class="comment">//在运行过程中，我们需要验证基准apk包的tinkerId是否等于补丁包的tinkerId。</span></div><div class="line">        <span class="comment">// 这个是决定补丁包能运行在哪些基准包上面，一般来说我们可以使用git版本号、versionName等等。</span></div><div class="line">        tinkerId = <span class="string">"1.0"</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">//用于生成补丁包中的'package_meta.txt'文件</span></div><div class="line">    packageConfig &#123;</div><div class="line">        <span class="comment">//onfigField("key", "value"), 默认我们自动从基准安装包与新安装包的Manifest中读取tinkerId,并自动写入configField。</span></div><div class="line">        <span class="comment">// 在这里，你可以定义其他的信息，在运行时可以通过TinkerLoadResult.getPackageConfigByName得到相应的数值。</span></div><div class="line">        <span class="comment">// 但是建议直接通过修改代码来实现，例如BuildConfig。</span></div><div class="line"><span class="comment">//        configField("TINKER_ID", "1.0")</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">//dex相关的配置项</span></div><div class="line">    dex &#123;</div><div class="line">        <span class="comment">//只能是'raw'或者'jar'。</span></div><div class="line">        <span class="comment">//对于'raw'模式，我们将会保持输入dex的格式。</span></div><div class="line">        <span class="comment">//对于'jar'模式，我们将会把输入dex重新压缩封装到jar。</span></div><div class="line">        <span class="comment">// 如果你的minSdkVersion小于14，你必须选择‘jar’模式，而且它更省存储空间，但是验证md5时比'raw'模式耗时()</span></div><div class="line">        dexMode = <span class="string">"jar"</span></div><div class="line">        <span class="comment">//需要处理dex路径，支持*、?通配符，必须使用'/'分割。路径是相对安装包的，例如/assets/...</span></div><div class="line">        pattern = [<span class="string">"classes*.dex"</span>, <span class="string">"assets/secondary-dex-?.jar"</span>]</div><div class="line">        <span class="comment">//它定义了哪些类在加载补丁包的时候会用到。这些类是通过Tinker无法修改的类，也是一定要放在main dex的类。</span></div><div class="line">        loader = [<span class="string">"com.tencent.tinker.loader.*"</span>, <span class="string">"com.cn21.tinkertest.MyApplication"</span>]</div><div class="line">        <span class="comment">/**</span></div><div class="line">         * 这里需要定义的类有：</div><div class="line">         1. 你自己定义的Application类；</div><div class="line">         2. Tinker库中用于加载补丁包的部分类，即com.tencent.tinker.loader.*；</div><div class="line">         3. 如果你自定义了TinkerLoader，需要将它以及它引用的所有类也加入loader中；</div><div class="line">         4. 其他一些你不希望被更改的类，例如Sample中的BaseBuildInfo类。这里需要注意的是，</div><div class="line">         这些类的直接引用类也需要加入到loader中。或者你需要将这个类变成非preverify。</div><div class="line">         */</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//lib相关的配置项</span></div><div class="line">    lib &#123;</div><div class="line">        <span class="comment">//需要处理lib路径，支持*、?通配符，必须使用'/'分割。与dex.pattern一致, 路径是相对安装包的，例如/assets/...</span></div><div class="line">        pattern = [<span class="string">"lib/armeabi/*.so"</span>, <span class="string">"lib/arm64-v8a/*.so"</span>, <span class="string">"lib/armeabi-v7a/*.so"</span>, <span class="string">"lib/mips/*.so"</span>, <span class="string">"lib/mips64/*.so"</span>, <span class="string">"lib/x86/*.so"</span>, <span class="string">"lib/x86_64/*.so"</span>]</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//res相关的配置项</span></div><div class="line">    res &#123;</div><div class="line">        pattern = [<span class="string">"res/*"</span>, <span class="string">"assets/*"</span>, <span class="string">"resources.arsc"</span>, <span class="string">"AndroidManifest.xml"</span>]</div><div class="line">        <span class="comment">//对于修改的资源，如果大于largeModSize，我们将使用bsdiff算法。</span></div><div class="line">        <span class="comment">// 这可以降低补丁包的大小，但是会增加合成时的复杂度。默认大小为100kb</span></div><div class="line">        largeModSize = <span class="number">100</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">//7zip路径配置项，执行前提是useSign为true</span></div><div class="line">    sevenZip &#123;</div><div class="line">        <span class="comment">//例如"com.tencent.mm:SevenZip:1.1.10"，将自动根据机器属性获得对应的7za运行文件，推荐使用。</span></div><div class="line">        zipArtifact = <span class="string">"com.tencent.mm:SevenZip:1.1.10"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面只是使用了部分tinker参数，全部参数及含义可参考<a href="https://github.com/Tencent/tinker/wiki/Tinker-%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97" target="_blank" rel="external">tinkerPatch gradle参数官方wiki</a></p>
<h3 id="2-修改Application类"><a href="#2-修改Application类" class="headerlink" title="2. 修改Application类"></a>2. 修改Application类</h3><ol>
<li>修改工程的Application类，使其继承自<strong>DefaultApplicationLike</strong>，然后生成默认的构造方法，并覆盖<strong>onBaseContextAttached</strong>方法，然后添加一个<strong>registerActivityLifecycleCallbacks</strong>方法，同时在自己的Application类上加上以下注解：</li>
</ol>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@DefaultLifeCycle(<span class="attr">application</span> = <span class="string">"com.cn21.tinkertest.MyApplication"</span>,</div><div class="line">       <span class="attr">flags</span> = ShareConstants.TINKER_ENABLE_ALL,</div><div class="line">       <span class="attr">loadVerifyFlag</span> = <span class="literal">false</span>)</div></pre></td></tr></table></figure>
<p>其中，</p>
<ul>
<li><strong>application</strong>属性指定的是tinker为我们生成的真正的Application，一般是<strong>包名＋自定义的Application名称</strong>作为名字，其中application属性指定的是tinker为我们生成的真正的Application类，需要注意两点，一是AndroidManifest.xml 中的application节点下的name 属性必须是这个application属性的值。As找不到这个Application报错但不会影响编译成功；二是在<strong>app/build.gradle</strong>文件中的tinkerPatch-dex-loader节点中添加application属性的值（见tinkerPatch gradle配置）。</li>
<li><strong>flags</strong>属性指定tinker可以修复的范围，<em>TINKER_ENABLE_ALL</em>是全部都可以修复，还有<em>TINKER_DEX_AND_LIBRARY</em>，<em>TINKER_RESOURCE_MASK</em>，<em>TINKER_DEX_MASK</em>等等，根据名字就可以知道所代表的含义。</li>
</ul>
<p>以下是完整的自定义Application代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@DefaultLifeCycle</span>(application = <span class="string">"com.cn21.tinkertest.MyApplication"</span>,</div><div class="line">        flags = ShareConstants.TINKER_ENABLE_ALL,</div><div class="line">        loadVerifyFlag = <span class="keyword">false</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TinkerTestApplicarion</span> <span class="keyword">extends</span> <span class="title">DefaultApplicationLike</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TinkerTestApplicarion</span><span class="params">(Application application, <span class="keyword">int</span> tinkerFlags, <span class="keyword">boolean</span> tinkerLoadVerifyFlag, <span class="keyword">long</span> applicationStartElapsedTime, <span class="keyword">long</span> applicationStartMillisTime, Intent tinkerResultIntent)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(application, tinkerFlags, tinkerLoadVerifyFlag, applicationStartElapsedTime, applicationStartMillisTime, tinkerResultIntent);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     *  install tinker</div><div class="line">     * <span class="doctag">@param</span> base</div><div class="line">     */</div><div class="line">    <span class="meta">@TargetApi</span>(Build.VERSION_CODES.ICE_CREAM_SANDWICH)</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBaseContextAttached</span><span class="params">(Context base)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onBaseContextAttached(base);</div><div class="line">        TinkerInstaller.install(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@TargetApi</span>(Build.VERSION_CODES.ICE_CREAM_SANDWICH)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerActivityLifecycleCallbacks</span><span class="params">(Application.ActivityLifecycleCallbacks callback)</span> </span>&#123;</div><div class="line">        getApplication().registerActivityLifecycleCallbacks(callback);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-使用tinker生成补丁"><a href="#3-使用tinker生成补丁" class="headerlink" title="3. 使用tinker生成补丁"></a>3. 使用tinker生成补丁</h3><p>到此，配置已经基本完成了。下面开始使用。</p>
<ol>
<li>首先编译运行一次工程，将生成的apk保存备份在除了build/output/apk以外的文件夹，tinker会读取这个旧的apk与新的apk进行比较生成补丁，同时需要修改<strong>app/build.gradle</strong>文件中oldApk的路径。</li>
<li>修改工程中代码或者资源，然后打开As gradle任务栏，找到<strong>tinker任务</strong>那一项，选择对应的tinker任务运行</li>
</ol>
<p><img src="http://om2bpqram.bkt.clouddn.com/1488428191026.jpg" alt="enter description here"></p>
<p>然后在build/outputs/tinkerPatch目录下会生成补丁包与相关日志。将补丁包<strong>patch_signed_7zip.apk</strong>push到手机的sdcard目录，此时就可以在工程需要的地方调用tinker 的补丁加载方法了</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">TinkerInstaller.onReceiveUpgradePatch(getApplicationContext(), Environment.getExternalStorageDirectory().getAbsolutePath() + <span class="string">"/patch_signed_7zip.apk"</span>);</div></pre></td></tr></table></figure>
<p>因为需要读取sdcard中的文件，因此读写权限必须要配置。<br>如果补丁加载成功，可以在logcat中看到以下信息</p>
<p><img src="http://om2bpqram.bkt.clouddn.com/1488428245626.jpg" alt="enter description here"><br>需要注意的是，tinker默认补丁成功后会杀死应用，因此如果有需要则自定义ResultService继承自<strong>DefaultTinkerResultService</strong>，修改补丁成功后的行为</p>
<ol>
<li>重启应用则可以看到打补丁后的效果。</li>
</ol>
<p>更详尽的tinker知识请参考tinker <a href="https://github.com/Tencent/tinker" target="_blank" rel="external">Github主页</a>，包括tinker源码与使用示例都可以看到</p>
<h2 id="Tinker接入其他问题"><a href="#Tinker接入其他问题" class="headerlink" title="Tinker接入其他问题"></a>Tinker接入其他问题</h2><h3 id="1-开启multidex支持"><a href="#1-开启multidex支持" class="headerlink" title="1. 开启multidex支持"></a>1. 开启multidex支持</h3><p>如果项目需要用到multidex则需要在gradle中添加multidex依赖，</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> <span class="string">"com.android.support:multidex:1.0.1"</span></div></pre></td></tr></table></figure>
<p>在android-defaultConfig节点中添加</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">multiDexEnabled</span> <span class="literal">true</span></div></pre></td></tr></table></figure>
<p>在Application初始化tinker之前加入</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">MultiDex.<span class="keyword">install</span>(base);</div></pre></td></tr></table></figure>
<h3 id="2-多渠道打包"><a href="#2-多渠道打包" class="headerlink" title="2. 多渠道打包"></a>2. 多渠道打包</h3><p>tinker默认是每个渠道生成一个对应的补丁包，这样子会造成空间浪费和发布的时候容易出错。因此官方推荐使用<a href="https://github.com/mcxiaoke/packer-ng-plugin" target="_blank" rel="external">packer-ng-plugin</a>工具进行多渠道打包。</p>
<h3 id="3-资源混淆"><a href="#3-资源混淆" class="headerlink" title="3. 资源混淆"></a>3. 资源混淆</h3><p>如果应用使用了<a href="https://github.com/shwenzhang/AndResGuard" target="_blank" rel="external">AndResGuard</a>混淆资源文件，编译流程需要做特殊处理，具体请参考<a href="http://www.cnblogs.com/yyangblog/p/6268818.html" target="_blank" rel="external">这篇文章</a></p>
<h3 id="4-应用加固"><a href="#4-应用加固" class="headerlink" title="4. 应用加固"></a>4. 应用加固</h3><p>tinker1.7.6之后不再支持加固</p>
<h3 id="5-tinker与instant-run的兼容问题"><a href="#5-tinker与instant-run的兼容问题" class="headerlink" title="5.tinker与instant run的兼容问题"></a>5.tinker与instant run的兼容问题</h3><p>事实上，若编译时都使用assemble*, tinker与instant run是可以兼容的。但是不少用户基础包与补丁包混用两种模式导致补丁过大，所以tinker编译时禁用instant run，我们可以在设置中禁用instant run或使用assemble方式编译。</p>
<p>大家日常debug时若想开启instant run功能，可以将tinker暂时关闭：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ext &#123;</div><div class="line">    <span class="comment">//for some reason, you may want to ignore tinkerBuild, such as instant run debug build?</span></div><div class="line">    tinkerEnabled = <span class="literal">false</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>更多常见问题请参见<a href="https://github.com/Tencent/tinker/wiki/Tinker-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98" target="_blank" rel="external">官方wiki</a></p>
]]></content>
    
    <summary type="html">
    
      最近调研了一下Tinker，并与其他修复框架做了一下对比，并尝试接入Tinker到工程中查看热修复效果
    
    </summary>
    
      <category term="Android" scheme="http://little-byte.com/categories/Android/"/>
    
    
      <category term="Tinker" scheme="http://little-byte.com/tags/Tinker/"/>
    
      <category term="热修复" scheme="http://little-byte.com/tags/%E7%83%AD%E4%BF%AE%E5%A4%8D/"/>
    
  </entry>
  
  <entry>
    <title>openresty-rsa加解密库</title>
    <link href="http://little-byte.com/2016/08/20/openresty-rsa%E5%8A%A0%E8%A7%A3%E5%AF%86%E5%BA%93/"/>
    <id>http://little-byte.com/2016/08/20/openresty-rsa加解密库/</id>
    <published>2016-08-20T08:53:22.000Z</published>
    <updated>2017-03-03T10:39:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>因为lua相关的RSA加解密库比较少，而C和C++相关的RSA加解密库却比较多，因此萌生了通过LuaJit的FFI  拓展库来调用C或C++实现来封装成Lua 的RSA库。经过谷歌终于找到了一个很符合要求的实现方法：<br><a href="http://hayageek.com/rsa-encryption-decryption-openssl-c/" target="_blank" rel="external">http://hayageek.com/rsa-encryption-decryption-openssl-c/</a></p>
<p>下面就来说说整个开发详细流程</p>
<h2 id="安装OpenSSL"><a href="#安装OpenSSL" class="headerlink" title="安装OpenSSL"></a>安装OpenSSL</h2><p>RSA加密和解密的公钥私钥由OpenSSL生成。在Ubuntu下，安装OpenSSL通过以下两条命令可以完成：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install openssl</div><div class="line">sudo apt-get install libssl-dev</div></pre></td></tr></table></figure></p>
<h2 id="生成公钥和私钥"><a href="#生成公钥和私钥" class="headerlink" title="生成公钥和私钥"></a>生成公钥和私钥</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">-- 生成 RSA 私钥（传统格式的,PKCS<span class="comment">#1标准）</span></div><div class="line">openssl genrsa -out rsa_private_key.pem 1024</div><div class="line">-- 将传统格式的私钥转换成 PKCS<span class="comment">#8 格式的（JAVA需要使用的私钥需要经过PKCS#8编码,而本次在项目作为接口使用Lua编写，如不需要这一步其实可以略过）</span></div><div class="line">openssl pkcs8 -topk8 -inform PEM -in rsa_private_key.pem -outform PEM -nocrypt</div><div class="line">-- 生成 RSA 公钥</div><div class="line">openssl rsa -in rsa_private_key.pem -pubout -out rsa_public_key.pem</div></pre></td></tr></table></figure>
<h2 id="编译动态链接库"><a href="#编译动态链接库" class="headerlink" title="编译动态链接库"></a>编译动态链接库</h2><p>参考上面给的链接，要封装的RSA加解密C语言实现版如下：<br>rsa.c文件<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;openssl/pem.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;openssl/ssl.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;openssl/rsa.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;openssl/evp.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;openssl/bio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;openssl/err.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"> </div><div class="line"><span class="keyword">int</span> padding = RSA_PKCS1_PADDING;</div><div class="line"> </div><div class="line"><span class="function">RSA * <span class="title">createRSA</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> * key,<span class="keyword">int</span> <span class="keyword">public</span>)</span></span></div><div class="line">&#123;</div><div class="line">    RSA *rsa= <span class="literal">NULL</span>;</div><div class="line">    BIO *keybio ;</div><div class="line">    keybio = BIO_new_mem_buf(key, <span class="number">-1</span>);</div><div class="line">    <span class="keyword">if</span> (keybio==<span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>( <span class="string">"Failed to create key BIO"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">public</span>)</div><div class="line">    &#123;</div><div class="line">        rsa = PEM_read_bio_RSA_PUBKEY(keybio, &amp;rsa,<span class="literal">NULL</span>, <span class="literal">NULL</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        rsa = PEM_read_bio_RSAPrivateKey(keybio, &amp;rsa,<span class="literal">NULL</span>, <span class="literal">NULL</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(rsa == <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>( <span class="string">"Failed to create RSA"</span>);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">return</span> rsa;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">public_encrypt</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> * data,<span class="keyword">int</span> data_len,<span class="keyword">unsigned</span> <span class="keyword">char</span> * key, <span class="keyword">unsigned</span> <span class="keyword">char</span> *encrypted)</span></span></div><div class="line">&#123;</div><div class="line">    RSA * rsa = createRSA(key,<span class="number">1</span>);</div><div class="line">    <span class="keyword">int</span> result = RSA_public_encrypt(data_len,data,encrypted,rsa,padding);</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">private_decrypt</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> * enc_data,<span class="keyword">int</span> data_len,<span class="keyword">unsigned</span> <span class="keyword">char</span> * key, <span class="keyword">unsigned</span> <span class="keyword">char</span> *decrypted)</span></span></div><div class="line">&#123;</div><div class="line">    RSA * rsa = createRSA(key,<span class="number">0</span>);</div><div class="line">    <span class="keyword">int</span>  result = RSA_private_decrypt(data_len,enc_data,decrypted,rsa,padding);</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">private_encrypt</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> * data,<span class="keyword">int</span> data_len,<span class="keyword">unsigned</span> <span class="keyword">char</span> * key, <span class="keyword">unsigned</span> <span class="keyword">char</span> *encrypted)</span></span></div><div class="line">&#123;</div><div class="line">    RSA * rsa = createRSA(key,<span class="number">0</span>);</div><div class="line">    <span class="keyword">int</span> result = RSA_private_encrypt(data_len,data,encrypted,rsa,padding);</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">public_decrypt</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> * enc_data,<span class="keyword">int</span> data_len,<span class="keyword">unsigned</span> <span class="keyword">char</span> * key, <span class="keyword">unsigned</span> <span class="keyword">char</span> *decrypted)</span></span></div><div class="line">&#123;</div><div class="line">    RSA * rsa = createRSA(key,<span class="number">1</span>);</div><div class="line">    <span class="keyword">int</span>  result = RSA_public_decrypt(data_len,enc_data,decrypted,rsa,padding);</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">printLastError</span><span class="params">(<span class="keyword">char</span> *msg)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">char</span> * err = <span class="built_in">malloc</span>(<span class="number">130</span>);;</div><div class="line">    ERR_load_crypto_strings();</div><div class="line">    ERR_error_string(ERR_get_error(), err);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s ERROR: %s\n"</span>,msg, err);</div><div class="line">    <span class="built_in">free</span>(err);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在ubuntu下通过以下命令来生成.so库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># gcc rsa.c -fPIC -shared -o librsa.so</span></div></pre></td></tr></table></figure></p>
<h2 id="使用rsa-so库"><a href="#使用rsa-so库" class="headerlink" title="使用rsa.so库"></a>使用rsa.so库</h2><p>生成的动态链接库放到<strong>usr/lib</strong>目录下就能使用了，以下使用rsa.so封装了一个lua版的rsa加解密库<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>(<span class="string">"rsa"</span>, <span class="built_in">package</span>.seeall)</div><div class="line"><span class="keyword">local</span> ffi = <span class="built_in">require</span>(<span class="string">'ffi'</span>)</div><div class="line"> </div><div class="line"><span class="keyword">local</span> rsa = ffi.<span class="built_in">load</span>(<span class="string">'rsa'</span>)</div><div class="line"> </div><div class="line">ffi.cdef <span class="string">[[</span></div><div class="line">int public_encrypt(unsigned char * data,int data_len,unsigned char * key, unsigned char *encrypted);</div><div class="line">int private_decrypt(unsigned char * enc_data,int data_len,unsigned char * key, unsigned char *decrypted);</div><div class="line"> </div><div class="line">int private_encrypt(unsigned char * data,int data_len,unsigned char * key, unsigned char *encrypted);</div><div class="line">int public_decrypt(unsigned char * enc_data,int data_len,unsigned char * key, unsigned char *decrypted);</div><div class="line">]]</div><div class="line"> </div><div class="line"><span class="keyword">local</span> _M = &#123; <span class="built_in">_VERSION</span> = <span class="string">'1.0'</span> &#125;</div><div class="line"> </div><div class="line"><span class="comment">--公钥加密</span></div><div class="line"><span class="function"><span class="keyword">function</span> _M.public_encrypt<span class="params">(msg, publicKey)</span></span></div><div class="line">    <span class="keyword">local</span> c_str = ffi.new(<span class="string">"char[?]"</span>, <span class="number">1024</span> / <span class="number">8</span>)</div><div class="line">    ffi.copy(c_str, msg)</div><div class="line">    <span class="keyword">local</span> pub = ffi.new(<span class="string">"char[?]"</span>, #publicKey)</div><div class="line">    ffi.copy(pub, publicKey)</div><div class="line">    <span class="comment">--存放加密结果</span></div><div class="line">    <span class="keyword">local</span> encrypt = ffi.new(<span class="string">"char[?]"</span>, <span class="number">2048</span>)</div><div class="line">    <span class="keyword">local</span> ret = rsa.public_encrypt(c_str, #msg, pub, encrypt)</div><div class="line">    <span class="keyword">if</span> ret == <span class="number">-1</span> <span class="keyword">then</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">nil</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">    <span class="keyword">return</span> ffi.<span class="built_in">string</span>(encrypt,ret)</div><div class="line"><span class="keyword">end</span></div><div class="line"> </div><div class="line"><span class="comment">--私钥解密</span></div><div class="line"><span class="function"><span class="keyword">function</span> _M.private_decrypt<span class="params">(msg, privateKey)</span></span></div><div class="line">    <span class="keyword">local</span> c_str = ffi.new(<span class="string">"char[?]"</span>, <span class="number">1024</span> / <span class="number">8</span>)</div><div class="line">    ffi.copy(c_str, msg)</div><div class="line">    <span class="keyword">local</span> pri = ffi.new(<span class="string">"char[?]"</span>, #privateKey)</div><div class="line">    ffi.copy(pri, privateKey)</div><div class="line">    <span class="comment">--存放解密结果</span></div><div class="line">    <span class="keyword">local</span> decrypt = ffi.new(<span class="string">"char[?]"</span>, <span class="number">2048</span>)</div><div class="line">    <span class="keyword">local</span> ret = rsa.private_decrypt(c_str, #msg, pri, decrypt)</div><div class="line">    <span class="keyword">if</span> ret == <span class="number">-1</span> <span class="keyword">then</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">nil</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">    <span class="keyword">return</span> ffi.<span class="built_in">string</span>(decrypt,ret)</div><div class="line"><span class="keyword">end</span></div><div class="line"> </div><div class="line"><span class="comment">--私钥加密</span></div><div class="line"><span class="function"><span class="keyword">function</span> _M.private_encrypt<span class="params">(msg, privateKey)</span></span></div><div class="line">    <span class="keyword">local</span> c_str = ffi.new(<span class="string">"char[?]"</span>, <span class="number">1024</span> / <span class="number">8</span>)</div><div class="line">    ffi.copy(c_str, msg)</div><div class="line">    <span class="keyword">local</span> pri = ffi.new(<span class="string">"char[?]"</span>, #privateKey)</div><div class="line">    ffi.copy(pri, privateKey)</div><div class="line">    <span class="comment">--存放加密结果</span></div><div class="line">    <span class="keyword">local</span> encrypt = ffi.new(<span class="string">"char[?]"</span>, <span class="number">2048</span>)</div><div class="line">    <span class="keyword">local</span> ret = rsa.private_encrypt(c_str, #msg, pri, encrypt)</div><div class="line">    <span class="keyword">if</span> ret == <span class="number">-1</span> <span class="keyword">then</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">nil</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">    <span class="keyword">return</span> ffi.<span class="built_in">string</span>(encrypt,ret)</div><div class="line"><span class="keyword">end</span></div><div class="line"> </div><div class="line"><span class="comment">--公钥解密</span></div><div class="line"><span class="function"><span class="keyword">function</span> _M.public_decrypt<span class="params">(msg, publicKey)</span></span></div><div class="line">    <span class="keyword">local</span> c_str = ffi.new(<span class="string">"char[?]"</span>, <span class="number">1024</span> / <span class="number">8</span>)</div><div class="line">    ffi.copy(c_str, msg)</div><div class="line">    <span class="keyword">local</span> pub = ffi.new(<span class="string">"char[?]"</span>, #publicKey)</div><div class="line">    ffi.copy(pub, publicKey)</div><div class="line">    <span class="comment">--存放解密结果</span></div><div class="line">    <span class="keyword">local</span> decrypt = ffi.new(<span class="string">"char[?]"</span>, <span class="number">2048</span>)</div><div class="line">    <span class="keyword">local</span> ret = rsa.public_decrypt(c_str, #msg, pub, decrypt)</div><div class="line">    <span class="keyword">if</span> ret == <span class="number">-1</span> <span class="keyword">then</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">nil</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">    <span class="keyword">return</span> ffi.<span class="built_in">string</span>(decrypt,ret)</div><div class="line"><span class="keyword">end</span></div><div class="line"> </div><div class="line"><span class="keyword">return</span> _M</div></pre></td></tr></table></figure></p>
<p>就这样，本人的openresty rsa加解密第三方库就制作完成了，支持公钥加密私钥解密，也支持私钥加密公钥解密。下面贴出本人的测试代码：<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">local</span> rsa = <span class="built_in">require</span> <span class="string">"resty.rsa"</span></div><div class="line"><span class="keyword">local</span> RSA_PUBLIC_KEY = <span class="string">[[-----BEGIN PUBLIC KEY-----</span></div><div class="line">MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC3bTBJNQJjY6u7Y5b2eOWws0yW</div><div class="line">CGuWPm6MGOSVan65wCrJa5p3q3sodQUDVPotjsknjLlje9E1F7Bx94ZuqTwkvAr6</div><div class="line">ieLkgbbeqTCzeJ0AryUXiF3auxFSPdpBoD6nxtEeN8bZwfa/IYzdKyKlbhiQbUMN</div><div class="line">qWgmxiPVwupwAML7RQIDAQAB</div><div class="line">-----END PUBLIC KEY-----]]</div><div class="line"><span class="keyword">local</span> RSA_PRIV_KEY = <span class="string">[[-----BEGIN RSA PRIVATE KEY-----</span></div><div class="line">MIICXAIBAAKBgQC3bTBJNQJjY6u7Y5b2eOWws0yWCGuWPm6MGOSVan65wCrJa5p3</div><div class="line">q3sodQUDVPotjsknjLlje9E1F7Bx94ZuqTwkvAr6ieLkgbbeqTCzeJ0AryUXiF3a</div><div class="line">uxFSPdpBoD6nxtEeN8bZwfa/IYzdKyKlbhiQbUMNqWgmxiPVwupwAML7RQIDAQAB</div><div class="line">AoGAc4NXvUKc1mqWY9Q75cwNGlJQEMwMtPlsNN4YVeBTHjdeuqoBBQwA62GGXqrN</div><div class="line">QpOBKl79ASGghob8n0j6aAY70PQqHSU4c06c7UlkeEvxJKlyUTO2UgnjjIHb2flR</div><div class="line">uW8y3xmjpXAfwe50eAVMNhCon7DBc+XMF/paSVwiG8V+GAECQQDvosVLImUkIXGf</div><div class="line">I2AJ2iSOUF8W1UZ5Ru68E8hJoVkNehk14RUFzTkwhoPHYDseZyEhSunFQbXCotlL</div><div class="line">Ar5+O+lBAkEAw/PJXvi3S557ihDjYjKnj/2XtIa1GwBJxOliVM4eVjfRX15OXPR2</div><div class="line">6shID4ZNWfkWN3fjVm4CnUS41+bzHNctBQJAGCeiF3a6FzA/0bixH40bjjTPwO9y</div><div class="line">kRrzSYX89F8NKOybyfCMO+95ykhk1B4BF4lxr3drpPSAq8Paf1MhfHvxgQJBAJUB</div><div class="line">0WNy5o+OWItJBGAr/Ne2E6KnvRhnQ7GFd8zdYJxXndNTt2tgSv2Gh6WmjzOYApjz</div><div class="line">heC3jy1gkN89NCn+RrECQBTvoqFHfyAlwOGC9ulcAcQDqj/EgCRVkVe1IsQZenAe</div><div class="line">rKCWlUaeIKeVkRz/wzb1zy9AVsPC7Zbnf4nrOxJ23mI=</div><div class="line">-----END RSA PRIVATE KEY-----]]</div><div class="line"> </div><div class="line">ngx.say(<span class="string">'-----公钥加密私钥解密 start------'</span>)</div><div class="line"><span class="keyword">local</span> str=<span class="string">'i love lwl'</span></div><div class="line"> </div><div class="line"><span class="keyword">local</span> encryptPubStr = rsa.public_encrypt(str, RSA_PUBLIC_KEY)</div><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> encryptPubStr <span class="keyword">then</span></div><div class="line">ngx.say(<span class="string">'pub encrypt failed'</span>)</div><div class="line"><span class="keyword">end</span></div><div class="line"><span class="keyword">local</span> decryptPriStr=rsa.private_decrypt(encryptPubStr,RSA_PRIV_KEY)</div><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> decryptPriStr <span class="keyword">then</span></div><div class="line">ngx.say(<span class="string">'pri decrypt failed'</span>)</div><div class="line"><span class="keyword">end</span></div><div class="line">ngx.say(<span class="string">'公钥加密私钥解密成功\n'</span>..decryptPriStr)</div><div class="line">ngx.say(<span class="string">'-----公钥加密私钥解密 end------'</span>)</div><div class="line"> </div><div class="line">ngx.say(<span class="string">'================================'</span>)</div><div class="line"> </div><div class="line">ngx.say(<span class="string">'-----私钥加密公钥解密 start------'</span>)</div><div class="line"><span class="keyword">local</span> str=<span class="string">'i like lwl'</span></div><div class="line"> </div><div class="line"><span class="keyword">local</span> encryptPriStr = rsa.private_encrypt(str, RSA_PRIV_KEY)</div><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> encryptPriStr <span class="keyword">then</span></div><div class="line">ngx.say(<span class="string">'pri encrypt failed'</span>)</div><div class="line"><span class="keyword">end</span></div><div class="line"><span class="keyword">local</span> decryptPubStr=rsa.public_decrypt(encryptPriStr,RSA_PUBLIC_KEY)</div><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> decryptPubStr <span class="keyword">then</span></div><div class="line">ngx.say(<span class="string">'pub decrypt failed'</span>)</div><div class="line"><span class="keyword">end</span></div><div class="line">ngx.say(<span class="string">'公钥加密私钥解密成功\n'</span>..decryptPubStr)</div><div class="line">ngx.say(<span class="string">'-----私钥加密公钥解密 end------'</span>)</div></pre></td></tr></table></figure></p>
<p>项目已托管到Github，欢迎star或fork，也欢迎提出改进意见。<br>传送门：<a href="https://github.com/LittleLiByte/lua-rsa" target="_blank" rel="external">lua-rsa</a></p>
]]></content>
    
    <summary type="html">
    
      最近在项目中用到OpenResty做服务端的接口，其中接口认证方面又用到了RSA算法进行加解密。但是目前OpenResty并没有官方的rsa模块，只有doujiang24前辈提供的lua-resty-rsa库，但是该库只支持公钥加密私钥解密，对私钥加密公钥解密却不支持，为了完善这一方面的缺陷，开发了自己的rsa加解密库
    
    </summary>
    
      <category term="OpenResty" scheme="http://little-byte.com/categories/OpenResty/"/>
    
    
      <category term="RSA" scheme="http://little-byte.com/tags/RSA/"/>
    
      <category term="Nginx" scheme="http://little-byte.com/tags/Nginx/"/>
    
      <category term="Lua" scheme="http://little-byte.com/tags/Lua/"/>
    
  </entry>
  
  <entry>
    <title>Github+Hexo搭建博客全记录</title>
    <link href="http://little-byte.com/2016/08/10/Github-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%85%A8%E8%AE%B0%E5%BD%95/"/>
    <id>http://little-byte.com/2016/08/10/Github-Hexo搭建博客全记录/</id>
    <published>2016-08-10T08:53:22.000Z</published>
    <updated>2017-03-03T11:06:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Github-配置"><a href="#1-Github-配置" class="headerlink" title="1. Github 配置"></a>1. Github 配置</h2><h3 id="Github-账号注册"><a href="#Github-账号注册" class="headerlink" title="Github 账号注册"></a>Github 账号注册</h3><p>*要在Github 上面搭建博客当然需要有个账号了，没有的赶紧注册一个，现在的程序员没有一个Github还怎么愉快装逼（误）。<br><a href="https://github.com/" target="_blank" rel="external">传送门</a>。怎么注册就不用细说了吧。</p>
<h3 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h3><p>新建一个仓库，用来放博客相关的配置和文章。名字可以随意，反正以后也能改。博客仓库一般都会起这个名字：<br><strong>github账号名字.github.io</strong>。<br>其他配置也随意，按个人喜好填写，如果实在懒直接下一步。╭(╯^╰)╮</p>
<h3 id="仓库配置"><a href="#仓库配置" class="headerlink" title="仓库配置"></a>仓库配置</h3><ul>
<li>进入仓库，仓库标题下方有7个导航，点击最右侧的<strong>Setting</strong>进入仓库属性设置</li>
<li>然后点击GitHub Pages 项下的<strong>Launch automatic page generator</strong>按钮</li>
<li>接着如果在新建仓库的时候又生成README.md文件可以选择<strong>Load README.md</strong></li>
<li>没有README.md文件则直接点击<strong>Continue to layouts</strong>进入主题选择，随便选一个就好，反正接下来会用更好的Hexo主题</li>
<li>再接着点击<strong>Publish page</strong>搞定</li>
</ul>
<p>这时候可以在setting页面找到刚刚创建的静态站点的访问地址<strong>Your site is published at xxx</strong>，如果仓库名字是<strong>github账号名字.github.io</strong>，那么访问 <strong><a href="http://github账号名字.github.io" target="_blank" rel="external">http://github账号名字.github.io</a></strong> 就可以看到自己创建好的站点了。</p>
<h2 id="2-域名绑定"><a href="#2-域名绑定" class="headerlink" title="2.域名绑定"></a>2.域名绑定</h2><p>实际上无需购买域名也可以搭建博客，因此如果不打算购买域名可以跳过此步。不过我觉得使用自己的个性域名会更加酷…</p>
<h3 id="域名购买"><a href="#域名购买" class="headerlink" title="域名购买"></a>域名购买</h3><p>我的域名在<a href="https://wanwang.aliyun.com/" target="_blank" rel="external">万网</a>买的，当然你可以选择<a href="https://www.dnspod.cn/" target="_blank" rel="external">dnspod</a>。不过个人感觉在万网购买会便宜点。根据个人喜好和经济情况选择域名和购买年限。</p>
<ul>
<li>在<strong>万网</strong>购买域名后，登录到控制台，进入域名选项页面，给你所购买的域名添加解析，因为博客使用的是Github提供的github pages，因此将<strong>github账号名字.github.io</strong>这个网站的IP地址设置为解析IP，可以使用Ping命令查看github账号名字.github.io的IP地址。</li>
<li>设置完成后，还需要在你新建的博客仓库下设置<strong>Custom domain</strong>，即把你的Github Pages和你购买的域名绑定，这样访问你所购买的域名就会重定向到博客所在的Github Pages。<br>如果还有疑问可以参考阿里云的云解析<a href="https://help.aliyun.com/knowledge_detail/29716.html?spm=5176.product29697.3.1.n5T5E9" target="_blank" rel="external">解析设置入门指南</a>。</li>
</ul>
<h2 id="3-使用Hexo博客框架"><a href="#3-使用Hexo博客框架" class="headerlink" title="3.使用Hexo博客框架"></a>3.使用Hexo博客框架</h2><blockquote>
<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
</blockquote>
<ul>
<li>Hexo相比于原生的Github Pages，无论是写作和部署的便捷性上还是主题美观程度上都好太多，所以使用Hexo博客框架是现在的潮流。<br>要使用Hexo，首先需要安装好<a href="https://git-scm.com/download/win" target="_blank" rel="external">Git</a>和<a href="http://nodejs.cn/" target="_blank" rel="external">NodeJs</a>,都是exe安装包，如果没有什么特殊需求一路默认设置下一步就可以了。</li>
<li>打开命令行窗口，输入<strong>npm install -g hexo-cli</strong>，耐心等待下载完成，即可安装好Hexo。</li>
<li>在你喜欢的目录下，按住Shift+鼠标右键，选择<strong>在此处打开命令行窗口</strong>，然后输入命令<strong>hexo init xxx</strong>,其中xxx名字可以随便起。耐心等待hexo初始化和依赖组件下载完成，等到命令行窗口输出<strong>INFO  Start blogging with Hexo!</strong>，初始化才是真正完成。</li>
</ul>
<p><img src="http://om2bpqram.bkt.clouddn.com/1488416894394.jpg" alt="enter description here"></p>
<ul>
<li>一般来说，只需关注<strong>网站配置文件_config.yml</strong>，<strong>博客文章存放目录source/_posts</strong>，<strong>网站主题目录theme</strong>。</li>
</ul>
<h3 id="网站配置文件-config-yml"><a href="#网站配置文件-config-yml" class="headerlink" title="网站配置文件_config.yml"></a>网站配置文件_config.yml</h3><p>具体config.yml配置请参考<a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="external">Hexo官方说明文档</a>.这里我只说我修改的地方。</p>
<ul>
<li><strong>title</strong> 博客和网页标签显示的标题，按个人喜好随意</li>
<li><strong>subtitle</strong> 博客副标题标题，一般写简介或者自己喜欢的话</li>
<li><strong>author</strong> 作者名字，随便起</li>
<li><strong>language</strong> 作者名字，随便起</li>
<li><strong>language</strong>除非你英文特牛逼，否则一般都会改成zh-CN</li>
<li><strong>url</strong> 设置为你购买的域名，如果没有购买域名可以设置为gtihub博客仓库地址</li>
<li><strong>deploy</strong>  需要进行如下设置：<br>　　type: git<br>　　repo:博客仓库的git地址，比如我的是<a href="https://github.com/LittleLiByte/littlelibyte.github.io.git。" target="_blank" rel="external">https://github.com/LittleLiByte/littlelibyte.github.io.git。</a><br>其他配置属性留到主题设置时再细说。</li>
</ul>
<h3 id="添加博文"><a href="#添加博文" class="headerlink" title="添加博文"></a>添加博文</h3><ul>
<li><p>使用命令 <strong>hexo new xxx</strong>   可以新建一篇博文,其中xxx是博文标题。新建完成后，可以在/source/_post目录下找到新建的文章，<strong>.md</strong>格式的文件，后缀名不言而喻，博文使用markdown语法来写。<br>看到这里不知道markdown的小白也许一惊–写个博客还要去学一种新语法?然而markdown语法真的很简单很简单，掌握基础够用的语法只要五分钟。不信？请看<a href="http://www.jianshu.com/p/1e402922ee32/" target="_blank" rel="external">Markdown 语法的简要规则</a>。了解这几个规则就足够写出条理清晰、排版美观的博文了。<br>写完博文后，就可以在博客目录下打开命令行窗口，通过<strong>hexo server</strong>启动hexo本地服务，进行文章预览调试，在浏览器输入<strong><a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a></strong>就可以预览效果了。</p>
</li>
<li><p>在将博文部署之前，如果你的博客购买了域名，那么还需要在博客目录的source文件夹下新建一个<strong>CNAME</strong>文件，只需要添加域名上去即可，例如我的域名是little-byte.com，则<strong>CNAME</strong>文件的内容只要添加little-byte.com即可。</p>
</li>
</ul>
<h3 id="将博文部署到Github"><a href="#将博文部署到Github" class="headerlink" title="将博文部署到Ｇithub"></a>将博文部署到Ｇithub</h3><p>在博客目录下打开命令行窗口，输入命令<strong>hexo deploy</strong>即可部署.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo deploy</div></pre></td></tr></table></figure></p>
<p>这时候打开你所绑定的域名或者GitHubPages页面，就可以看到你新写的文章了。</p>
<h2 id="4-更换主题"><a href="#4-更换主题" class="headerlink" title="4.更换主题"></a>4.更换主题</h2><p>Hexo默认的主题是landscape，个人感觉除了背景图比较酷炫之外，其他地方都很一般。所以爱折腾的我就要折腾出自己喜欢的主题。诸多比较之后，选择了YeLee.</p>
<h3 id="NexT主题下载"><a href="#NexT主题下载" class="headerlink" title="NexT主题下载"></a>NexT主题下载</h3><p>进入到博客目录内，然后通过git将NexT主题文件下载到该文件夹内</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/MOxFIVE/hexo-theme-yelee.git themes/yelee</div></pre></td></tr></table></figure>
<h3 id="使用NexT主题"><a href="#使用NexT主题" class="headerlink" title="使用NexT主题"></a>使用NexT主题</h3><p>修改网站配置文件_config.yml，将<strong>theme: landscape</strong>改成<strong>theme: Yelee</strong>，只需这么一句话就可以启用Yelee主题了。<br>可以通过 <code>hexo clean &amp;&amp; hexo s</code> 命令来在本地启用调试，查看效果。<br>一般来说，效果类似下图：</p>
<p><img src="http://om2bpqram.bkt.clouddn.com/1488435176017.jpg" alt="enter description here"></p>
<p>然后就可以开始按照自己的喜好进行配置了。YeLee 详细配置文档见此：<a href="http://moxfive.coding.me/yelee/2.Basic-Usage/" target="_blank" rel="external">传送门</a><br><strong>YeLee</strong>说明文档已经说明得非常详细清晰了，这里就不再赘述了。<br>如果搭建过程有疑问，欢迎留言讨论。</p>
]]></content>
    
    <summary type="html">
    
      断断续续花了差不多3天时间，终于搭好了这个博客，心情大好，决定记录下本人搭建过程的一点心得，以供同样在摸索的你参考
    
    </summary>
    
      <category term="博客搭建" scheme="http://little-byte.com/categories/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="Hexo" scheme="http://little-byte.com/tags/Hexo/"/>
    
      <category term="YeLee" scheme="http://little-byte.com/tags/YeLee/"/>
    
  </entry>
  
</feed>
