<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[在原有Android项目中快速集成React Native]]></title>
      <url>http://little-byte.com/2017/12/15/%E5%9C%A8%E5%8E%9F%E6%9C%89Android%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%BF%AB%E9%80%9F%E9%9B%86%E6%88%90React-Native/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>对于现有的大多数项目来说都不是从头构建的，而要在原有项目的基础上引入React Native则肯定和用<code>react-native init xxx</code>创建工程不同。因此下面就来说下具体操作。不过在真正开始之前还是要先说明一下工具配置。</p>
<ul>
<li><a href="http://nodejs.cn/download/" target="_blank" rel="external">NodeJS</a>：选择对应的系统下载并安装，安装完即可在终端运行npm 命令。</li>
<li>配置源，众所周知因为墙的原因，所以最好配置国内的源。<br>配置方法如下：</li>
</ul>
<figure class="highlight tcl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm config <span class="keyword">set</span> <span class="keyword">registry</span> https://<span class="keyword">registry</span>.npm.taobao.org --<span class="keyword">global</span></div><div class="line">npm config <span class="keyword">set</span> disturl https://npm.taobao.org/dist --<span class="keyword">global</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="1-加入package-json文件以及index-android-js文件"><a href="#1-加入package-json文件以及index-android-js文件" class="headerlink" title="1.加入package.json文件以及index.android.js文件"></a>1.加入package.json文件以及index.android.js文件</h2><p><strong>一般地，我们可以在项目根目录下创建package.json文件以及index.android.js文件。</strong></p>
<ul>
<li>package.json文件类似与Android中的build.gradle文件，在其中主要配置了React Native所需的依赖库以及一些脚本语句。以下的代码可以看作是一个package.json文件的模版,版本号可以根据需要而定。</li>
</ul>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"XXX"</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"0.0.1"</span>,</div><div class="line">  <span class="attr">"private"</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">"scripts"</span>: &#123;</div><div class="line">    <span class="attr">"start"</span>: <span class="string">"node node_modules/react-native/local-cli/cli.js start"</span>,</div><div class="line">    <span class="attr">"test"</span>: <span class="string">"jest"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"dependencies"</span>: &#123;</div><div class="line">    <span class="attr">"react"</span>: <span class="string">"16.0.0"</span>,</div><div class="line">    <span class="attr">"react-native"</span>: <span class="string">"0.50.3"</span>,</div><div class="line">    <span class="attr">"react-native-device-info"</span>: <span class="string">"^0.12.1"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"devDependencies"</span>: &#123;</div><div class="line">    <span class="attr">"babel-jest"</span>: <span class="string">"21.2.0"</span>,</div><div class="line">    <span class="attr">"babel-preset-react-native"</span>: <span class="string">"4.0.0"</span>,</div><div class="line">    <span class="attr">"jest"</span>: <span class="string">"21.2.1"</span>,</div><div class="line">    <span class="attr">"react-test-renderer"</span>: <span class="string">"16.0.0"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"jest"</span>: &#123;</div><div class="line">    <span class="attr">"preset"</span>: <span class="string">"react-native"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>index.android.js 文件是RN程序的入口文件。通常index.android.js 文件如下：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React,&#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  AppRegistry,View,Text,</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</div><div class="line">    <span class="comment">//...其他方法</span></div><div class="line">    render()&#123;</div><div class="line">        <span class="keyword">return</span>(</div><div class="line">            &lt;View&gt;</div><div class="line">                &lt;Text&gt;this is React Native  Page&lt;/Text&gt;</div><div class="line">            &lt;/View&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">	 <span class="comment">//...其他方法</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">AppRegistry.registerComponent(<span class="string">'XXX'</span>, () =&gt; App);</div></pre></td></tr></table></figure>
<p>然后，在该目录下打开终端，运行 <code>npm i</code> 命令，安装React Native 所需的依赖，安装完成后会在根目录下创建node_modules文件夹，下载的依赖就在这个文件夹下。到此，第一步的工作已经完成了。</p>
<p><strong>—–分割线——</strong><br>实际上我们不会将RN代码放到Android工程里，因为在一般的公司项目中，使用SVN或者Git进行管理，客户端目录下一般都会有Android和iOS两个目录区分两个端。而React Native作为一个跨平台的框架，放在Android或者iOS目录里都不太合适。因此个人认为比较好的做法是在Android和iOS同级目录创建一个ReactNative目录，放置RN项目的代码。因此目录结构大致如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├──Android</div><div class="line">	├──trunk</div><div class="line">	├──branches</div><div class="line">	└──tags	</div><div class="line">├──iOS      </div><div class="line">	├──trunk</div><div class="line">	├──branches</div><div class="line">	└──tags            			</div><div class="line">└──ReactNative	</div><div class="line">	├──trunk</div><div class="line">	├──branches</div><div class="line">	└──tags</div></pre></td></tr></table></figure></p>
<p>此时，RN项目的代码包括package.json文件以及index.android.js文件都是在trunk目录下，自然地，需要在trunk目录打开终端，运行运行 <code>npm i</code> 命令，安装React Native 所需的依赖，而node_modules文件夹也自然会在该文件夹内创建。</p>
<h2 id="2-在Android项目中配置ReactNative依赖"><a href="#2-在Android项目中配置ReactNative依赖" class="headerlink" title="2.在Android项目中配置ReactNative依赖"></a>2.在Android项目中配置ReactNative依赖</h2><h3 id="对于package-json文件在Android-工程中的情况"><a href="#对于package-json文件在Android-工程中的情况" class="headerlink" title="对于package.json文件在Android 工程中的情况"></a>对于package.json文件在Android 工程中的情况</h3><p>首先编辑在项目目录下<strong>build.gradle</strong>文件。</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class">allprojects </span>&#123;</div><div class="line">    <span class="class">repositories </span>&#123;</div><div class="line">        google()</div><div class="line">        jcenter()</div><div class="line">		<span class="comment">//添加这个仓库</span></div><div class="line">        <span class="class">maven </span>&#123;</div><div class="line">            <span class="comment">// All of React Native (JS, Android binaries) is installed from npm</span></div><div class="line">            url <span class="string">"$rootDir/node_modules/react-native/android"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后在编辑app目录下的<strong>build.gradle</strong>文件，添加React Native依赖。</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">implementation</span> <span class="string">'com.facebook.react:react-native:0.50.3'</span></div></pre></td></tr></table></figure>
<p>注意该版本号需要与package.json文件中配置的RN版本号保持一致。<br>之所以需要在项目的<strong>build.gradle</strong>文件中添加maven配置，是因为Android项目默认的依赖包的源jcenter()并不包含最新版的React Native（它只到0.20.1）。</p>
<h3 id="对ReactNative独立目录情况"><a href="#对ReactNative独立目录情况" class="headerlink" title="对ReactNative独立目录情况"></a>对ReactNative独立目录情况</h3><p>与第一种情况并无太大区别，只是RN的maven仓库路径有所不同。因为通过版本控制拉取下来的工程位置各有不同，为了避免开发人员对项目目录下的<strong>build.gradle</strong>文件编辑冲突，推荐使用如下方式：</p>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//加载<span class="built_in">local</span>.<span class="built_in">properties</span>配置</div><div class="line">Properties <span class="built_in">properties</span> = <span class="built_in">new</span> Properties()</div><div class="line">InputStream inputStream = project.rootProject.file('<span class="built_in">local</span>.<span class="built_in">properties</span>').newDataInputStream();</div><div class="line"><span class="built_in">properties</span>.<span class="built_in">load</span>(inputStream)</div><div class="line"></div><div class="line">allprojects &#123;</div><div class="line">    repositories &#123;</div><div class="line">        jcenter()</div><div class="line">        maven &#123;</div><div class="line">            // All of React Native (JS, Android binaries) <span class="built_in">is</span> installed from npm</div><div class="line">            url <span class="built_in">properties</span>.getProperty('reactnative.dir')</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中<code>local.properties</code>文件不需要提交版本控制，并在其中添加一个reactnative.dir属性，属性值为RN的android工程目录路径，例如在我的项目中</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">reactnative.dir=<span class="regexp">/Users/</span>littlebyte<span class="regexp">/svn/</span>ReactNative<span class="regexp">/ReactNative/</span>node_modules<span class="regexp">/react-native/</span>android</div></pre></td></tr></table></figure>
<h2 id="3-创建RN视图承载的Activity或Fragment"><a href="#3-创建RN视图承载的Activity或Fragment" class="headerlink" title="3.创建RN视图承载的Activity或Fragment"></a>3.创建RN视图承载的Activity或Fragment</h2><h3 id="创建RN视图承载的Activity"><a href="#创建RN视图承载的Activity" class="headerlink" title="创建RN视图承载的Activity"></a>创建RN视图承载的Activity</h3><p>public class MyReactActivity extends ReactActivity {</p>
<pre><code>@Override
protected String getMainComponentName() {
    //该返回值需要与N程序的入口文件index.android.js中的注册的名字相同
    return &quot;XXX&quot;;
}
</code></pre><p>}</p>
<h3 id="创建RN视图承载的Fragment"><a href="#创建RN视图承载的Fragment" class="headerlink" title="创建RN视图承载的Fragment"></a>创建RN视图承载的Fragment</h3><p>与Activity不同,在Fragment中加载RN有点不一样。但在Android中加载RN，无论是在Activity还是Fragment，加载的都只是一个View而已。而给Fragment设置View，只需要Fragment的onCreateView返回RN的View即可。代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String COMPONENT_NAME = <span class="string">"MyFragment"</span>;</div><div class="line">    <span class="keyword">private</span> ReactRootView mReactRootView;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAttach</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onAttach(context);</div><div class="line">        mReactRootView = <span class="keyword">new</span> ReactRootView(context);</div><div class="line">        mReactRootView.startReactApplication(</div><div class="line">                getReactNativeHost().getReactInstanceManager(),</div><div class="line">                COMPONENT_NAME,</div><div class="line">                <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreateView(inflater, container, savedInstanceState);</div><div class="line">        <span class="keyword">return</span> mReactRootView;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">        <span class="keyword">if</span> (mReactRootView != <span class="keyword">null</span>) &#123;</div><div class="line">            mReactRootView.unmountReactApplication();</div><div class="line">            mReactRootView = <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (getReactNativeHost().hasInstance()) &#123;</div><div class="line">            getReactNativeHost().getReactInstanceManager().onHostDestroy(getActivity()</div><div class="line">            );</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> ReactNativeHost <span class="title">getReactNativeHost</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> ((ReactApplication) getActivity().getApplication()).getReactNativeHost();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> ReactInstanceManager <span class="title">getReactInstanceManager</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> getReactNativeHost().getReactInstanceManager();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>而后Fragment该怎么用就怎么用。</p>
<h2 id="4-修改Application"><a href="#4-修改Application" class="headerlink" title="4.修改Application"></a>4.修改Application</h2><p>修改自定义的 Application ，实现 ReactApplication 接口。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> <span class="keyword">implements</span> <span class="title">ReactApplication</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> ReactNativeHost mReactNativeHost = <span class="keyword">new</span> ReactNativeHost(<span class="keyword">this</span>) &#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">getUseDeveloperSupport</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> BuildConfig.DEBUG;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> List&lt;ReactPackage&gt; <span class="title">getPackages</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> Arrays.&lt;ReactPackage&gt;asList(</div><div class="line">                    <span class="keyword">new</span> MainReactPackage()</div><div class="line">            );</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ReactNativeHost <span class="title">getReactNativeHost</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mReactNativeHost;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="5-修改Application，添加相应的权限以及Activity声明"><a href="#5-修改Application，添加相应的权限以及Activity声明" class="headerlink" title="5.修改Application，添加相应的权限以及Activity声明"></a>5.修改Application，添加相应的权限以及Activity声明</h2><p>RN需要添加以下权限：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span>/&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.SYSTEM_ALERT_WINDOW"</span>/&gt;</span></div></pre></td></tr></table></figure>
<p>除了声明自定义的Activity，还需要添加DevSettingsActivity，用来修改RN的相关设置。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">"com.facebook.react.devsupport.DevSettingsActivity"</span>/&gt;</span></div></pre></td></tr></table></figure>
<p>至此，Android原生项目集成RN的工作就基本完成了。</p>
<h2 id="6-调试"><a href="#6-调试" class="headerlink" title="6.调试"></a>6.调试</h2><p>要调试首先需要启动RN的本地服务器。<code>在package.json</code>文件所在目录打开终端，运行<code>react-native start</code>命令即可启动本地服务器。然后安装并运行App。<br>如果使用模拟器调试则可以直接运行打开RN的页面，而如果使用真机调试还需要摇一摇弹出设置菜单，点击<strong>Dev Settings</strong>，设置<strong>Debug server host&amp;port for device</strong>,填入<code>你电脑的ip:8081</code>即可。<br>之后就可以愉快的调试运行了。</p>
]]></content>
      
        
        <tags>
            
            <tag> react-native </tag>
            
            <tag> android </tag>
            
            <tag> 集成 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android中预加载React Native jsBundle]]></title>
      <url>http://little-byte.com/2017/07/03/Android%E4%B8%AD%E9%A2%84%E5%8A%A0%E8%BD%BDReact-Native-jsBundle/</url>
      <content type="html"><![CDATA[<p>前段时间在项目中遇到了一个问题：从原生模块跳转到RN模块时会有一段短暂的白屏时间，特别是在低端手机更加明显。在网上搜了一圈，发现这个问题非常常见。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ReactRootView mReactRootView = createRootView();</div><div class="line">mReactRootView.startReactApplication(mReactInstanceManager, getMainComponentName(), getLaunchOptions());</div></pre></td></tr></table></figure>
<p>这两行代码就是白屏的主要原因。因为这两行代码把jsbundle文件读入到内存中，这个过程肯定是需要耗费一些时间的，当jsbundle文件越大，可以预见加载到内存中需要的时间就越长。<br>解决办法就是<strong>以空间换时间</strong>，在app启动时候，就将ReactRootView初始化出来，并缓存起来，在用的时候从缓存获取ReactRootView使用，达到秒开。<br>目前的React Native版本更新到了0.45.1，而网上大部分的解决方案都偏旧,但是解决思路还是一样的，不过具体的解决方法会做些修改（因为RN源码的变动）。<br>下面开始详细说明。<br><a id="more"></a></p>
<h2 id="1-创建ReactRootView缓存管理器"><a href="#1-创建ReactRootView缓存管理器" class="headerlink" title="1. 创建ReactRootView缓存管理器"></a>1. 创建ReactRootView缓存管理器</h2><p>View缓存管理器先提前将ReactRootView初始化并用一个WeakHashMap保存。在这里需要十分小心内存泄露的问题。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RNCacheViewManager</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, ReactRootView&gt; CACHE;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REQUEST_OVERLAY_PERMISSION_CODE = <span class="number">1111</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String REDBOX_PERMISSION_MESSAGE =</div><div class="line">            <span class="string">"Overlay permissions needs to be granted in order for react native apps to run in dev mode"</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ReactRootView <span class="title">getRootView</span><span class="params">(String moduleName)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (CACHE == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">return</span> CACHE.get(moduleName);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ReactNativeHost <span class="title">getReactNativeHost</span><span class="params">(Activity activity)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> ((ReactApplication) activity.getApplication()).getReactNativeHost();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">    * 预加载所需的RN模块</div><div class="line">    * <span class="doctag">@param</span> activity 预加载时所在的Activity</div><div class="line">    * <span class="doctag">@param</span> launchOptions 启动参数</div><div class="line">    * <span class="doctag">@param</span> moduleNames 预加载模块名</div><div class="line">    * 建议在主界面onCreate方法调用，最好的情况是主界面在应用运行期间一直存在不被关闭</div><div class="line">    */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Activity activity, Bundle launchOptions, String... moduleNames)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (CACHE == <span class="keyword">null</span>) CACHE = <span class="keyword">new</span> WeakHashMap&lt;&gt;();</div><div class="line">        <span class="keyword">boolean</span> needsOverlayPermission = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">if</span> (BuildConfig.DEBUG &amp;&amp; Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M &amp;&amp; !Settings.canDrawOverlays(activity)) &#123;</div><div class="line">            needsOverlayPermission = <span class="keyword">true</span>;</div><div class="line">            Intent serviceIntent = <span class="keyword">new</span> Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION, Uri.parse(<span class="string">"package:"</span> + activity.getPackageName()));</div><div class="line">            FLog.w(ReactConstants.TAG, REDBOX_PERMISSION_MESSAGE);</div><div class="line">            Toast.makeText(activity, REDBOX_PERMISSION_MESSAGE, Toast.LENGTH_LONG).show();</div><div class="line">            activity.startActivityForResult(serviceIntent, REQUEST_OVERLAY_PERMISSION_CODE);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!needsOverlayPermission) &#123;</div><div class="line">            <span class="keyword">for</span> (String moduleName : moduleNames) &#123;</div><div class="line">                ReactRootView rootView = <span class="keyword">new</span> ReactRootView(activity);</div><div class="line">                rootView.startReactApplication(</div><div class="line">                        getReactNativeHost(activity).getReactInstanceManager(),</div><div class="line">                        moduleName,</div><div class="line">                        launchOptions);</div><div class="line">                CACHE.put(moduleName, rootView);</div><div class="line">                FLog.i(ReactConstants.TAG, moduleName+<span class="string">" has preload"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">    * 销毁指定的预加载RN模块</div><div class="line">    *</div><div class="line">    * <span class="doctag">@param</span> componentName</div><div class="line">    */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">onDestroyOne</span><span class="params">(String componentName)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            ReactRootView reactRootView = CACHE.get(componentName);</div><div class="line">            <span class="keyword">if</span> (reactRootView != <span class="keyword">null</span>) &#123;</div><div class="line">                ViewParent parent = reactRootView.getParent();</div><div class="line">                <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</div><div class="line">                    ((android.view.ViewGroup) parent).removeView(reactRootView);</div><div class="line">                &#125;</div><div class="line">                reactRootView.unmountReactApplication();</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">    * 销毁全部RN模块</div><div class="line">    * 建议在主界面onDestroy方法调用</div><div class="line">    */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">for</span> (Map.Entry&lt;String, ReactRootView&gt; entry : CACHE.entrySet()) &#123;</div><div class="line">                ReactRootView reactRootView = entry.getValue();</div><div class="line">                ViewParent parent = reactRootView.getParent();</div><div class="line">                <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</div><div class="line">                    ((android.view.ViewGroup) parent).removeView(reactRootView);</div><div class="line">                &#125;</div><div class="line">                reactRootView.unmountReactApplication();</div><div class="line">                reactRootView=<span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">            CACHE.clear();</div><div class="line">            CACHE = <span class="keyword">null</span>;</div><div class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="2-Activity中预加载ReactNative"><a href="#2-Activity中预加载ReactNative" class="headerlink" title="2. Activity中预加载ReactNative"></a>2. Activity中预加载ReactNative</h2><p>第二步就是与旧的实现方式不太一样的地方，因为现在ReactActivity的主要逻辑基本都由ReactActivityDelegate代理实现,所以所做的修改就有所不同，只需要实现自己的代理并在自己的ReactActivity覆盖createReactActivityDelegate即可。</p>
<h3 id="2-1创建自己的ReactActivityDelegate"><a href="#2-1创建自己的ReactActivityDelegate" class="headerlink" title="2.1创建自己的ReactActivityDelegate"></a>2.1创建自己的ReactActivityDelegate</h3><p>这里直接继承ReactActivityDelegate并重写需要的方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C3ReactActivityDelegate</span> <span class="keyword">extends</span> <span class="title">ReactActivityDelegate</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Activity mActivity;</div><div class="line">    <span class="keyword">private</span> String mainComponentName;</div><div class="line">    <span class="keyword">private</span> ReactRootView reactRootView;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">C3ReactActivityDelegate</span><span class="params">(Activity activity, @Nullable String mainComponentName)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(activity, mainComponentName);</div><div class="line">        <span class="keyword">this</span>.mActivity = activity;</div><div class="line">        <span class="keyword">this</span>.mainComponentName = mainComponentName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        Class&lt;ReactActivityDelegate&gt; clazz = ReactActivityDelegate.class;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Field field = clazz.getDeclaredField(<span class="string">"mDoubleTapReloadRecognizer"</span>);</div><div class="line">            field.setAccessible(<span class="keyword">true</span>);</div><div class="line">            field.set(<span class="keyword">this</span>, <span class="keyword">new</span> DoubleTapReloadRecognizer());</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        loadApp(<span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onPause();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onResume();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">        reactRootView.unmountReactApplication();</div><div class="line">        reactRootView=<span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> ReactNativeHost <span class="title">getReactNativeHost</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getReactNativeHost();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">loadApp</span><span class="params">(String appKey)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mainComponentName == <span class="keyword">null</span>) &#123;</div><div class="line">            FLog.e(ReactConstants.TAG, <span class="string">"mainComponentName must not be null!"</span>);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        reactRootView = RNCacheViewManager.getInstance().getRootView(mainComponentName);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span> (reactRootView == <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="comment">// 2.缓存中不存在RootView,直接创建</span></div><div class="line">                reactRootView = <span class="keyword">new</span> ReactRootView(mActivity);</div><div class="line">                reactRootView.startReactApplication(</div><div class="line">                        getReactInstanceManager(),</div><div class="line">                        mainComponentName,</div><div class="line">                        <span class="keyword">null</span>);</div><div class="line">            &#125;</div><div class="line">            ViewParent viewParent = reactRootView.getParent();</div><div class="line">            <span class="keyword">if</span> (viewParent != <span class="keyword">null</span>) &#123;</div><div class="line">                ViewGroup vp = (ViewGroup) viewParent;</div><div class="line">                vp.removeView(reactRootView);</div><div class="line">            &#125;</div><div class="line">            mActivity.setContentView(reactRootView);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>重点关注<code>onCreate</code>方法与<code>loadApp</code>以及<code>onDestroy</code>方法。<br><code>onCreate</code>方法没有调用父类的方法，而不是完全重写，其中重点是调用了loadApp方法，因为此时是通过预加载方式先把ReactRootView渲染了，因此此时appkey是什么都不重要了.<br><code>onDestroy</code>方法调用ReactActivityDelegate的onDestroy方法，同时需要手动调用reactRootView与Activity分离方法并将reactRootView置空，防止可能出现的内存泄漏。</p>
<h3 id="2-2继承ReactActivity并修改代理创建方法"><a href="#2-2继承ReactActivity并修改代理创建方法" class="headerlink" title="2.2继承ReactActivity并修改代理创建方法"></a>2.2继承ReactActivity并修改代理创建方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 将Activity继承本类将会预加载RN模块</div><div class="line"> * Created by lizhj on 2017/8/23.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">C3ReactAppCompatActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title">DefaultHardwareBackBtnHandler</span>, <span class="title">PermissionAwareActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> C3ReactActivityDelegate mDelegate;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">C3ReactAppCompatActivity</span><span class="params">()</span> </span>&#123;</div><div class="line">        mDelegate = createReactActivityDelegate();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Returns the name of the main component registered from JavaScript.</div><div class="line">     * This is used to schedule rendering of the component.</div><div class="line">     * e.g. "MoviesApp"</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getMainComponentName</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * Called at construction time, override if you have a custom delegate implementation.</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">protected</span> C3ReactActivityDelegate <span class="title">createReactActivityDelegate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> C3ReactActivityDelegate(<span class="keyword">this</span>, getMainComponentName());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        mDelegate.onCreate(savedInstanceState);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onPause();</div><div class="line">        mDelegate.onPause();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onResume();</div><div class="line">        mDelegate.onResume();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">        mDelegate.onDestroy();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</div><div class="line">        mDelegate.onActivityResult(requestCode, resultCode, data);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onKeyUp</span><span class="params">(<span class="keyword">int</span> keyCode, KeyEvent event)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mDelegate.onKeyUp(keyCode, event) || <span class="keyword">super</span>.onKeyUp(keyCode, event);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBackPressed</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!mDelegate.onBackPressed()) &#123;</div><div class="line">            <span class="keyword">super</span>.onBackPressed();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invokeDefaultOnBackPressed</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onBackPressed();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onNewIntent</span><span class="params">(Intent intent)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!mDelegate.onNewIntent(intent)) &#123;</div><div class="line">            <span class="keyword">super</span>.onNewIntent(intent);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestPermissions</span><span class="params">(</span></span></div><div class="line">            String[] permissions,</div><div class="line">            <span class="keyword">int</span> requestCode,</div><div class="line">            PermissionListener listener) &#123;</div><div class="line">        mDelegate.requestPermissions(permissions, requestCode, listener);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRequestPermissionsResult</span><span class="params">(</span></span></div><div class="line">            <span class="keyword">int</span> requestCode,</div><div class="line">            String[] permissions,</div><div class="line">            <span class="keyword">int</span>[] grantResults) &#123;</div><div class="line">        mDelegate.onRequestPermissionsResult(requestCode, permissions, grantResults);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> ReactNativeHost <span class="title">getReactNativeHost</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mDelegate.getReactNativeHost();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> ReactInstanceManager <span class="title">getReactInstanceManager</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mDelegate.getReactInstanceManager();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码很多，其实最关键的只是这两处，即修改原有的代理为自己写的代理。</p>
<pre><code>private final C3ReactActivityDelegate mDelegate;

protected C3ReactAppCompatActivity() {
    mDelegate = createReactActivityDelegate();
}
protected C3ReactActivityDelegate createReactActivityDelegate() {
    return new C3ReactActivityDelegate(this, getMainComponentName());
}
</code></pre><p>其实这里面完全可以直接继承ReactActivity，这样上面的大部分方法其实都不需复写了，这里继承只是为了表明这个支持预加载的Activity完全可以继承你需要的Activity，像我之前在的项目中就是将C3ReactAppCompatActivity 继承自项目的基类Activity。</p>
<h3 id="2-3-创建React-Native对应的Activity"><a href="#2-3-创建React-Native对应的Activity" class="headerlink" title="2.3 创建React Native对应的Activity"></a>2.3 创建React Native对应的Activity</h3><p>在这里可以像之前继承ReactActivit那样创建自己的Activity，bu tong继承CCCReactActivity)。<br>例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PreLoadRNActivity</span> <span class="keyword">extends</span> <span class="title">C3ReactAppCompatActivity</span>  </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String COMPONENT_NAME=PreLoadRNActivity.class.getSimpleName();</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMainComponentName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> COMPONENT_NAME;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="3-Fragment中预加载ReactNative"><a href="#3-Fragment中预加载ReactNative" class="headerlink" title="3. Fragment中预加载ReactNative"></a>3. Fragment中预加载ReactNative</h2><p>在Fragment中预加载ReactNative其实比Activity中加载更简单。众所周知在Fragment的onCreateView方法中需要返回显示在界面的View，而这时候我们就可以返回RNCacheViewManager中缓存的ReactRootView。<br>具体代码如下：</p>
<h3 id="3-1-支持预加载的React-Native-Fragment"><a href="#3-1-支持预加载的React-Native-Fragment" class="headerlink" title="3.1 支持预加载的React Native Fragment"></a>3.1 支持预加载的React Native Fragment</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">C3ReactFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> ReactRootView mReactRootView;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getMainComponentName</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAttach</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onAttach(context);</div><div class="line">        mReactRootView = RNCacheViewManager.getInstance().getRootView(getMainComponentName());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreateView(inflater, container, savedInstanceState);</div><div class="line">        <span class="keyword">return</span> mReactRootView;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-2-Fragment相关的Activity和Delegate"><a href="#3-2-Fragment相关的Activity和Delegate" class="headerlink" title="3.2 Fragment相关的Activity和Delegate"></a>3.2 Fragment相关的Activity和Delegate</h3><p>与第二节中Activity和Delegate相差无几，其中最大的区别是FragmentDelegate中不需要调用loadApp方法。完整的代码见文末传送门。</p>
<h2 id="4-初始化ReactRootView缓存管理器"><a href="#4-初始化ReactRootView缓存管理器" class="headerlink" title="4.初始化ReactRootView缓存管理器"></a>4.初始化ReactRootView缓存管理器</h2><p><strong>初始化方法</strong></p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">RNCacheViewManager.init(<span class="keyword">this</span>, <span class="string">"这里填写模块名"</span>, <span class="literal">null</span>);</div></pre></td></tr></table></figure>
<p>需要注意的是：<br>第三个参数可以设置传递给RN的属性（Bundle封装类型），如有需要才传值，否则传空即可。</p>
<p><strong>初始化时机</strong><br>现在主流的应用大部分都是这种结构：启动Activity+主Activity（可能包含几个Fragment）+其他Activity<br>而预加载时机个人任务最好就是在主Activity，因为主Activity有几乎整个应用相同的生命周期，可以保证预加载RN视图的成功，并且在主Activity销毁的时候同时销毁RNCacheViewManager可以避免内存泄露</p>
<h2 id="5-对比测试"><a href="#5-对比测试" class="headerlink" title="5.对比测试"></a>5.对比测试</h2><p>在三星SM-G3609手机(运存768M)上做了几次测试，打包后的jsBundle大小：522KB<br>无预加载的情况下，从原生模块打开RN页面平均耗时1769 ms<br>有预加载的情况下，从原生模块打开RN页面平均耗时160ms<br>效果非常明显！<br>从用户体验来说，打开页面如果有1 2秒白屏这简直不能忍，而通过预加载可以达到几乎是秒开的体验，所以为什么不用呢？</p>
<h2 id="6-关于RN的SYSTEM-ALERT-WINDOW权限问题"><a href="#6-关于RN的SYSTEM-ALERT-WINDOW权限问题" class="headerlink" title="6.关于RN的SYSTEM_ALERT_WINDOW权限问题"></a>6.关于RN的SYSTEM_ALERT_WINDOW权限问题</h2><p>在调试模式需要SYSTEM_ALERT_WINDOW权限,用来打开调试信息窗口。官方做法是打开React Native承载的Activity才去申请权限以及接收权限是否授予都在同一个Activity中处理，而预加载方法则是在应用可能会在启动时就开始申请权限，因此也建议在主Activity接收权限是否授予回调，即覆盖<code>onActivityResult</code>方法，如果被授权则会开始加载React Native，具体代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onActivityResult(requestCode, resultCode, data);    <span class="comment">//处理调试模式下悬浮窗权限被授予回调</span></div><div class="line">    <span class="keyword">if</span> (requestCode == REQUEST_OVERLAY_PERMISSION_CODE &amp;&amp; Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M &amp;&amp; Settings.canDrawOverlays(<span class="keyword">this</span>)) &#123;</div><div class="line">        restartApp();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 重启应用以使预加载生效</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">restartApp</span><span class="params">()</span> </span>&#123;</div><div class="line">    Intent mStartActivity = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MainActivity.class);</div><div class="line">    <span class="keyword">int</span> mPendingIntentId = <span class="number">123456</span>;</div><div class="line">    PendingIntent mPendingIntent = PendingIntent.getActivity(<span class="keyword">this</span>, mPendingIntentId,    mStartActivity, PendingIntent.FLAG_CANCEL_CURRENT);</div><div class="line">    AlarmManager mgr = (AlarmManager)<span class="keyword">this</span>.getSystemService(Context.ALARM_SERVICE);</div><div class="line">    mgr.set(AlarmManager.RTC, System.currentTimeMillis() + <span class="number">10</span>, mPendingIntent);</div><div class="line">    System.exit(<span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="7-局限性"><a href="#7-局限性" class="headerlink" title="7.局限性"></a>7.局限性</h2><h3 id="局限性一：lauchOptions传递受限"><a href="#局限性一：lauchOptions传递受限" class="headerlink" title="局限性一：lauchOptions传递受限"></a>局限性一：lauchOptions传递受限</h3><p>通过预加载可以很顺滑地打开RN页面，但是lauchOptions这个传递RN的数据就比较受限了，因为在预加载的时候需要传递给RN的lauchOptions其实不多，因此建议lauchOptions最好只传递尽可能早明确的属性，例如一些appkey配置等<br>。而如果需要通过传递lauchOptions来动态选择RN加载的页面，这种多入口的方式就不合适选择预加载，此时更推荐选择多注册的方式来实现多入口。关于RN多入口方式实现详情可以看这里：<a href="http://little-byte.com/2017/06/29/React-Native%E5%A4%9A%E5%85%A5%E5%8F%A3%E8%B0%83%E7%A0%94/">传送门</a></p>
<h3 id="局限性二：组件componentDidMount方法会在预加载完成后提前调用"><a href="#局限性二：组件componentDidMount方法会在预加载完成后提前调用" class="headerlink" title="局限性二：组件componentDidMount方法会在预加载完成后提前调用"></a>局限性二：组件componentDidMount方法会在预加载完成后提前调用</h3><p>组件的生命周期componentDidMount方法是非常重要的方法，比如会在这里发起网络请求，注册事件等等，而预加载完成componentDidMount就被调用了其实很多时候并不是我们想要的，但是为了使用预加载而不得不做的一个妥协。</p>
<h3 id="局限性三：预加载不能过多"><a href="#局限性三：预加载不能过多" class="headerlink" title="局限性三：预加载不能过多"></a>局限性三：预加载不能过多</h3><p>使用预加载方式肯定会占用一定内存，因此强烈不建议每个页面都用预加载，个人觉得1到2个RN页面使用预加载方式还是可以接受的</p>
<p>项目相关代码：<a href="https://github.com/LittleLiByte/react-native-android-preload" target="_blank" rel="external">react-native-android-preload</a></p>
<p>参考文章：<br><a href="https://github.com/cnsnake11/blog/blob/master/ReactNative%E5%BC%80%E5%8F%91%E6%8C%87%E5%AF%BC/ReactNative%E5%AE%89%E5%8D%93%E9%A6%96%E5%B1%8F%E7%99%BD%E5%B1%8F%E4%BC%98%E5%8C%96.md" target="_blank" rel="external">ReactNative安卓首屏白屏优化</a></p>
]]></content>
      
        
        <tags>
            
            <tag> react-native </tag>
            
            <tag> 预加载 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React Native多入口调研]]></title>
      <url>http://little-byte.com/2017/06/29/React-Native%E5%A4%9A%E5%85%A5%E5%8F%A3%E8%B0%83%E7%A0%94/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在做原生项目集成RN的时候遇到了一个问题：如果从原生进入RN有多个入口或者说从原生不同的地方可以进入到不同的RN组件，该怎么做？由此展开了调研。<br>在调研后得出了两种方案：</p>
<ol>
<li><strong>注册多个根组件入口</strong></li>
<li><strong>只注册一个入口，根据RN传递属性选择进入不同的组件</strong><a id="more"></a>
<h2 id="多注册入口"><a href="#多注册入口" class="headerlink" title="多注册入口"></a>多注册入口</h2>这种方案是在index.android.js /index.ios.js 中注册多个跟组件。<br>下面以android为例。<br>Android项目集成RN此处不具体展开，请参考：<br><a href="http://www.tuicool.com/articles/fiaqMjv" target="_blank" rel="external">React Native植入原生Android应用的流程解析</a><br><a href="http://www.tuicool.com/articles/ym2q2eU" target="_blank" rel="external">弹射起步：Android原生项目集成React Native模块</a></li>
</ol>
<p>注册多个根组件方式如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span></div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  AppRegistry,</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"><span class="keyword">import</span> RNEntrance1 <span class="keyword">from</span> <span class="string">'./js/RNEntrance1'</span></div><div class="line"><span class="keyword">import</span> RNEntrance2 <span class="keyword">from</span> <span class="string">'./js/RNEntrance2'</span></div><div class="line"><span class="keyword">import</span> RNEntrance3 <span class="keyword">from</span> <span class="string">'./js/RNEntrance3'</span></div><div class="line"></div><div class="line">AppRegistry.registerComponent(<span class="string">'RNActivity1'</span>, () =&gt; RNEntrance1);</div><div class="line">AppRegistry.registerComponent(<span class="string">'RNActivity2'</span>, () =&gt; RNEntrance2);</div><div class="line">AppRegistry.registerComponent(<span class="string">'RNActivity3'</span>, () =&gt; RNEntrance3);</div></pre></td></tr></table></figure>
<p>相应的，在Android原生模块中需要建立多个对应的ReactActivity，并在<code>getMainComponentName</code>方法中返回对应的跟组件名字，如下图：</p>
<p><img src="http://om2bpqram.bkt.clouddn.com/1498698996729.jpg" alt="enter description here"></p>
<h2 id="单注册入口"><a href="#单注册入口" class="headerlink" title="单注册入口"></a>单注册入口</h2><p>这种方式是在进入RN之前设置传递属性，然后在根组件获取这个属性，并跟进属性的不同进入到不同的入口。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">RNActivity</span> <span class="keyword">extends</span> <span class="title">ReactActivity</span> </span>&#123;</div><div class="line">    @Override</div><div class="line">    protected <span class="built_in">String</span> getMainComponentName() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"RNActivity"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected ReactActivityDelegate createReactActivityDelegate() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ReactActivityDelegate(<span class="keyword">this</span>, getMainComponentName()) &#123;</div><div class="line">            @Nullable</div><div class="line">            @Override</div><div class="line">            protected Bundle getLaunchOptions() &#123;</div><div class="line">                <span class="keyword">return</span> MainApplication.getBundle();</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>getLaunchOptions</strong>方法可以设置传递给跟组件的属性值（Bundle类型），此处以传递int值为例。<br>具体的MainApplication.java 代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> <span class="keyword">implements</span> <span class="title">ReactApplication</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">final</span> ReactNativeHost mReactNativeHost = <span class="keyword">new</span> ReactNativeHost(<span class="keyword">this</span>) &#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">getUseDeveloperSupport</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> BuildConfig.DEBUG;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">protected</span> List&lt;ReactPackage&gt; <span class="title">getPackages</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> Arrays.&lt;ReactPackage&gt;asList(</div><div class="line">                    <span class="keyword">new</span> MainReactPackage()</div><div class="line">            );</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ReactNativeHost <span class="title">getReactNativeHost</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mReactNativeHost;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Bundle sBundle = <span class="keyword">new</span> Bundle();</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> RN_ENTRANCE_1 = <span class="number">1</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> RN_ENTRANCE_2 = <span class="number">2</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> RN_ENTRANCE_3 = <span class="number">3</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setRNInitProps</span><span class="params">(<span class="keyword">int</span> entrance)</span> </span>&#123;</div><div class="line">        sBundle.putInt(<span class="string">"entrance"</span>,entrance);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bundle <span class="title">getBundle</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> sBundle;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>而在index.android.js 中获取this.props.entrance并判断不同条件下进入不同的RN页面</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;AppRegistry,&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"><span class="keyword">import</span> RNEntrance1 <span class="keyword">from</span> <span class="string">'./js/RNEntrance1'</span></div><div class="line"><span class="keyword">import</span> RNEntrance2 <span class="keyword">from</span> <span class="string">'./js/RNEntrance2'</span></div><div class="line"><span class="keyword">import</span> RNEntrance3 <span class="keyword">from</span> <span class="string">'./js/RNEntrance3'</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Root</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    render() &#123;</div><div class="line">        <span class="keyword">switch</span> (<span class="keyword">this</span>.props.entrance) &#123;</div><div class="line">            <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">                <span class="keyword">return</span> &lt;RNEntrance1 /&gt;</div><div class="line">            case 2:</div><div class="line">                return &lt;RNEntrance2 /&gt;</div><div class="line">            case 3:</div><div class="line">                return &lt;RNEntrance3 /&gt;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">AppRegistry.registerComponent('RNActivity', () =&gt; Root);</div></pre></td></tr></table></figure>
<h2 id="两种方式对比"><a href="#两种方式对比" class="headerlink" title="两种方式对比"></a>两种方式对比</h2><h3 id="多注册入口方式"><a href="#多注册入口方式" class="headerlink" title="多注册入口方式"></a>多注册入口方式</h3><p>第一种方案在网上据说内存开销太大，因此针对两者进行内存测试。<br>刚打开APP内存占用如图：</p>
<p><img src="http://om2bpqram.bkt.clouddn.com/1498702889477.jpg" alt="enter description here"></p>
<p>打开第一个RN页面，内存会明显拔高，并且随时间会缓慢增加，而后在一段时间后会明显降低并又开始缓慢增加，如此循环。</p>
<p><img src="http://om2bpqram.bkt.clouddn.com/1498702933557.jpg" alt="enter description here"></p>
<p>在退出这个RN页面后内存占用并没有明显下降<br>在打开第二个页面之后页面会有个明显下降而后又迅速增多(如下图V字形曲线)</p>
<p><img src="http://om2bpqram.bkt.clouddn.com/1498704640207.jpg" alt="enter description here"></p>
<p>退出第二个RN页面再打开第三个RN页面，内存占用会较明显下降而后又迅速增多(如下图V字形曲线)</p>
<p><img src="http://om2bpqram.bkt.clouddn.com/1498705128634.jpg" alt="enter description here"></p>
<p>最高内存占用在4M左右。</p>
<h3 id="单注册入口方式"><a href="#单注册入口方式" class="headerlink" title="单注册入口方式"></a>单注册入口方式</h3><p>未加载jsbundle之前：</p>
<p><img src="http://om2bpqram.bkt.clouddn.com/1498705496655.jpg" alt="enter description here"><br>加载第一个RN页面，内存占用曲线明显拔高，并且随时间逐渐增多，但在一段时间后会跌落，如此循环</p>
<p><img src="http://om2bpqram.bkt.clouddn.com/1498705512138.jpg" alt="enter description here"><br>退出RN页面，内存占用没有明显减少<br>加载第二个RN页面，加载后增加，过后会减少，退出RN页面内存占用没有明显减少</p>
<p><img src="http://om2bpqram.bkt.clouddn.com/1498705557832.jpg" alt="enter description here"><br>加载第三个RN页面，加载后增加，过后会减少，退出RN页面内存占用没有明显减少。APP最高占用内存也在4M左右</p>
<p><img src="http://om2bpqram.bkt.clouddn.com/1498705584383.jpg" alt="enter description here"></p>
<p><strong>总体来说：单注册入口和多注册入口，占用内存没有明显区别</strong></p>
]]></content>
      
        
        <tags>
            
            <tag> react-native </tag>
            
            <tag> 多入口 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React Native 单元测试实践]]></title>
      <url>http://little-byte.com/2017/06/20/React-Native-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E5%AE%9E%E8%B7%B5/</url>
      <content type="html"><![CDATA[<p>React Native 单元测试目前网上的资料比较少，大多数都是点到为止，并没有什么实际用处，而在Github上的开源项目的单元测试也不多,提供的参考也有限。所以这方面只能自己一点点摸索，这里记录一下这几天摸索的心得，以及对项目进行单元测试遇到的问题和解决方法。</p>
<h2 id="单元测试框架-Jest"><a href="#单元测试框架-Jest" class="headerlink" title="单元测试框架-Jest"></a>单元测试框架-Jest</h2><p>Jest 是Facebook的一个专门进行Javascript单元测试的工具，也是RN自带的一个测试框架。因此没有理由不使用。<br>jest官方文档地址：<a href="https://facebook.github.io/jest/docs/getting-started.html#content" target="_blank" rel="external">https://facebook.github.io/jest/docs/getting-started.html#content</a><br>这里可以着重看下：<a href="https://facebook.github.io/jest/docs/tutorial-react-native.html#content" target="_blank" rel="external"><strong>Testing React Native Apps</strong></a>，专门为RN写的jest测试指南，虽然不多，聊胜于无。</p>
<p>jest测试运行方式，在终端通过命令：<code>npm test</code>运行<br><a id="more"></a><br>下面说下Jest测试遇到对一些问题。</p>
<h3 id="项目使用了原生模块的第三方库"><a href="#项目使用了原生模块的第三方库" class="headerlink" title="项目使用了原生模块的第三方库"></a>项目使用了原生模块的第三方库</h3><p>一些RN组件或第三方组件依赖原生API来实现，在这种情况下运行npm test命令会报错(但是测试可能会通过)。<br>比如在项目中引用了react-native-linear-gradient这个第三方库，这个线性渐变库有使用原生模块，因此jest测试会有以下问题。</p>
<p><img src="http://om2bpqram.bkt.clouddn.com/1497929311535.jpg" alt="enter description here"></p>
<p><strong>解决办法：</strong><br>在index.ios.js/index.android.js文件中添加mock本地模块，比如<code>react-native-linear-gradient</code>这个第三方库，我们用jest.mock方法来模拟，消除原生模块的影响。mock方法如下：</p>
<figure class="highlight moonscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jest.mock(<span class="string">'react-native-linear-gradient'</span>, <span class="function"><span class="params">()</span> =&gt;</span> <span class="string">'react-native-linear-gradient'</span>)</div></pre></td></tr></table></figure>
<h3 id="项目使用了自己编写的原生模块"><a href="#项目使用了自己编写的原生模块" class="headerlink" title="项目使用了自己编写的原生模块"></a>项目使用了自己编写的原生模块</h3><p>在项目中使用自己编写的原生模块，引用时通过<code>NativeModules.模块名</code>进行引用.但在测试时会报以下错误。</p>
<p><img src="http://om2bpqram.bkt.clouddn.com/1497927815582.jpg" alt="enter description here"><br>参考使用原生模块的第三方库解决方案，我们使用同样的方式进行解决，其中MyPageApiFunction为原生模块名，getMyPageInfo为原生模块中的方法，jest.fn()为jest提供的模拟方法。</p>
<figure class="highlight moonscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">jest.mock(<span class="string">'NativeModules'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line"><span class="keyword">return</span> &#123;</div><div class="line"><span class="name">MyPageApiFunction</span>: &#123;</div><div class="line"><span class="name">getMyPageInfo</span>: jest.fn(),</div><div class="line">&#125;,</div><div class="line">&#125;;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>然而这样还是没有解决！进过苦苦摸索，终于在Github的issue找到了解决办法。<br>修改package.json文件，在jest节点中添加以下配置：</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="string">"jest"</span>: &#123;</div><div class="line"><span class="string">"preset"</span>: <span class="string">"react-native"</span>,</div><div class="line"><span class="string">"setupFiles"</span>: [<span class="string">"./jest/setup.js"</span>]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>同时在项目根目录下新建一个jest文件夹和setup.js文件,setup.js只需添加一句：<br>import ‘react-native’;<br>即可，此时再运行npm test 命令就不会再遇到<code>native module cannot be null</code>的错误了。</p>
<p>UI组件测试，目前所知的针对UI组件测试有两种方式，一个快照测试（Snapshot），一个是浅渲染测试（Shallow Rendering）</p>
<h3 id="快照测试Snapshot"><a href="#快照测试Snapshot" class="headerlink" title="快照测试Snapshot"></a>快照测试Snapshot</h3><p>当想要确保您的UI不会意外更改时，快照测试是非常有用的工具。在RN中第一次对某个组件进行快照测试时，会在同目录下创建一个<strong>snapshots</strong>文件夹，并将快照结果存放在该文件夹中。快照结果文件以xxx.js.snap命名，其内容为某个状态下的UI组件树。<br>以下是一个快照测试例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//这是组件 Intro.js</span></div><div class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">StyleSheet,</div><div class="line">Text,</div><div class="line">View,</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"></div><div class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</div><div class="line"><span class="attr">container</span>: &#123;</div><div class="line"><span class="attr">alignItems</span>: <span class="string">'center'</span>,</div><div class="line"><span class="attr">backgroundColor</span>: <span class="string">'#F5FCFF'</span>,</div><div class="line"><span class="attr">flex</span>: <span class="number">1</span>,</div><div class="line"><span class="attr">justifyContent</span>: <span class="string">'center'</span>,</div><div class="line">&#125;,</div><div class="line"><span class="attr">instructions</span>: &#123;</div><div class="line"><span class="attr">color</span>: <span class="string">'#333333'</span>,</div><div class="line"><span class="attr">marginBottom</span>: <span class="number">5</span>,</div><div class="line"><span class="attr">textAlign</span>: <span class="string">'center'</span>,</div><div class="line">&#125;,</div><div class="line"><span class="attr">welcome</span>: &#123;</div><div class="line"><span class="attr">fontSize</span>: <span class="number">20</span>,</div><div class="line"><span class="attr">margin</span>: <span class="number">10</span>,</div><div class="line"><span class="attr">textAlign</span>: <span class="string">'center'</span>,</div><div class="line">&#125;,</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Intro</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">render() &#123;</div><div class="line"><span class="keyword">return</span> (</div><div class="line">&lt;View style=&#123;styles.container&#125;&gt;</div><div class="line">&lt;Text style=&#123;styles.welcome&#125;&gt;</div><div class="line">Welcome to React Native!</div><div class="line">&lt;/Text&gt;</div><div class="line">&lt;Text style=&#123;styles.instructions&#125;&gt;</div><div class="line">This is a React Native snapshot test.</div><div class="line">&lt;/Text&gt;</div><div class="line">&lt;/View&gt;</div><div class="line">);</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在创建一个快照测试：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// __tests__/Intro-test.js</span></div><div class="line"><span class="keyword">import</span> <span class="string">'react-native'</span>;</div><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> Intro <span class="keyword">from</span> <span class="string">'../Intro'</span>;</div><div class="line"></div><div class="line"><span class="comment">// Note: test renderer must be required after react-native.</span></div><div class="line"><span class="keyword">import</span> renderer <span class="keyword">from</span> <span class="string">'react-test-renderer'</span>;</div><div class="line"></div><div class="line">test(<span class="string">'renders correctly'</span>, <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line"><span class="keyword">const</span> tree = renderer.create(</div><div class="line">&lt;Intro /&gt;</div><div class="line">).toJSON();</div><div class="line">expect(tree).toMatchSnapshot();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>然后运行<code>npm test</code>命令则会在<strong>snapshots</strong>文件夹输出快照结果。</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">// __tests_<span class="number">_</span>/__snapshots_<span class="number">_</span>/Intro-test.js.snap</div><div class="line">exports[`Intro renders correctly <span class="number">1</span>`] = `</div><div class="line">&lt;View</div><div class="line">style=&#123;</div><div class="line">Object &#123;</div><div class="line"><span class="string">"alignItems"</span>: <span class="string">"center"</span>,</div><div class="line"><span class="string">"backgroundColor"</span>: <span class="string">"#F5FCFF"</span>,</div><div class="line"><span class="string">"flex"</span>: <span class="number">1</span>,</div><div class="line"><span class="string">"justifyContent"</span>: <span class="string">"center"</span>,</div><div class="line">&#125;</div><div class="line">&#125;&gt;</div><div class="line">&lt;Text</div><div class="line">style=&#123;</div><div class="line">Object &#123;</div><div class="line"><span class="string">"fontSize"</span>: <span class="number">20</span>,</div><div class="line"><span class="string">"margin"</span>: <span class="number">10</span>,</div><div class="line"><span class="string">"textAlign"</span>: <span class="string">"center"</span>,</div><div class="line">&#125;</div><div class="line">&#125;&gt;</div><div class="line">Welcome <span class="keyword">to</span> React Native!</div><div class="line">&lt;/Text&gt;</div><div class="line">&lt;Text</div><div class="line">style=&#123;</div><div class="line">Object &#123;</div><div class="line"><span class="string">"color"</span>: <span class="string">"#333333"</span>,</div><div class="line"><span class="string">"marginBottom"</span>: <span class="number">5</span>,</div><div class="line"><span class="string">"textAlign"</span>: <span class="string">"center"</span>,</div><div class="line">&#125;</div><div class="line">&#125;&gt;</div><div class="line">This is a React Native snapshot test.</div><div class="line">&lt;/Text&gt;</div><div class="line">&lt;/View&gt;</div><div class="line">`;</div></pre></td></tr></table></figure>
<p>下次运行测试时，渲染的输出将与先前创建的快照进行比较。快照应该沿代码更改提交。当快照测试失败时，您需要检查是否是非预期的更改。如果是预期的更改，您可以使用<code>npm test -- -u</code>命令来覆盖现有的快照。</p>
<h3 id="浅渲染测试（Shallow-Rendering）"><a href="#浅渲染测试（Shallow-Rendering）" class="headerlink" title="浅渲染测试（Shallow Rendering）"></a>浅渲染测试（Shallow Rendering）</h3><p>浅渲染（Shallow Rendering）在我们针对某个上层组件进行测试时，可以不用渲染它的子组件，所以就不用再担心子组件的表现和行为，这样就可以只对特定组件的逻辑及其渲染输出进行测试了。Facebook 官方提供了 react-addons-test-utils 可以让我们使用浅渲染这个特性，用于测试虚拟 DOM 对象，即 React.Component 的实例。但我们这里介绍的不是react-addons-test-utils，而是Enzyme，来自于活跃在 JavaScript 开源社区的 Airbnb 公司，是对官方测试工具库（ react-addons-test-utils ）的封装，它模拟了 jQuery 的 API，非常直观并且易于使用和学习，提供了一些与众不同的接口和几个方法来减少测试的样板代码，方便你判断、操纵和遍历 React Components 的输出，并且减少了测试代码和实现代码之间的耦合。<br>下面是官方给出的一个简单例子：</p>
<figure class="highlight moonscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">import &#123; shallow &#125; from &apos;enzyme&apos;</div><div class="line"></div><div class="line">describe(&apos;Enzyme Shallow&apos;, () =&gt; &#123;</div><div class="line">it(&apos;App should have three &lt;Todo /&gt; components&apos;, () =&gt; &#123;</div><div class="line">const app = shallow(&lt;App /&gt;)</div><div class="line">expect(app.find(&apos;Todo&apos;)).to.have.length(3)</div><div class="line">&#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>shallow 方法只会渲染出组件的第一层 DOM 结构，其嵌套的子组件不会被渲染出来，从而使得渲染的效率更高，单元测试的速度也会更快。<br>下面是天翼云项目针对表格组件写的浅渲染测试例子：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">it(<span class="string">'renders a MineGridItem using Enzyme without backup animation'</span>, () =&gt; &#123;</div><div class="line"><span class="keyword">const</span> wrapper = shallow(</div><div class="line">&lt;MineGridItem</div><div class="line">info=&#123;infos[0]&#125;</div><div class="line">keyIndex=&#123;0&#125;</div><div class="line">onPress=&#123;jest.fn()&#125;</div><div class="line">enableAutoBackup=&#123;false&#125;</div><div class="line">/&gt;</div><div class="line">);</div><div class="line"></div><div class="line">const &#123;title, image, keyIndex, enableAutoBackup&#125; = infos[0];</div><div class="line">expect(wrapper.contains(</div><div class="line">&lt;View style=&#123;styles.container&#125;&gt;</div><div class="line">&lt;Image style=&#123;[styles.icon, &#123;justifyContent: 'flex-end'&#125;]&#125; source=&#123;&#123;uri: image&#125;&#125;&gt;</div><div class="line">&lt;/Image&gt;</div><div class="line">&lt;Text style=&#123;styles.title&#125;&gt;</div><div class="line">&#123;title&#125;</div><div class="line">&lt;/Text&gt;</div><div class="line">&lt;/View&gt;</div><div class="line">)).toBe(true);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>MineGridItem组件如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;TouchableHighlight style=&#123;styles.container&#125; onPress=&#123;<span class="keyword">this</span>.props.onPress&#125;&gt;</div><div class="line">&lt;View style=&#123;styles.container&#125;&gt;</div><div class="line">&lt;Image style=&#123;[styles.icon, &#123;justifyContent: 'flex-end'&#125;]&#125; source=&#123;&#123;uri: imageUrl&#125;&#125;&gt;</div><div class="line">&lt;/Image&gt;</div><div class="line">&lt;Text style=&#123;styles.title&#125;&gt;</div><div class="line">&#123;title&#125;</div><div class="line">&lt;/Text&gt;</div><div class="line">&lt;/View&gt;</div><div class="line">&lt;<span class="regexp">/TouchableHighlight&gt;</span></div></pre></td></tr></table></figure>
<p>浅渲染的常见用法：<br><strong>使用shallow方法包裹待测试组件，在expect方法中写出期待渲染出来对UI并将两者进行比较。</strong></p>
<p>不论快照测试还是浅渲染测试都是一些坑需要注意：</p>
<ol>
<li>在快照测试中，如果待测试的组件带有Touchable组件，在期待组件中需要忽略Touchable组件。否则运行会报错</li>
<li>快照测试和浅渲染测试中，如果组件跟动画相关即使用 Animate.Component这些组件，在运行时也会报错 <code>TypeError: Cannot read property &#39;validAttributes&#39; of undefined</code>，暂时还没有找到解决办法</li>
<li>订阅原生模块的事件的API暂时还没有办法模拟成功</li>
</ol>
<p>关于快照测试和浅渲染测试，完整工程请查看：<a href="https://github.com/ferrannp/react-native-testing-example" target="_blank" rel="external">https://github.com/ferrannp/react-native-testing-example</a></p>
<h3 id="关于代码覆盖率"><a href="#关于代码覆盖率" class="headerlink" title="关于代码覆盖率"></a>关于代码覆盖率</h3><p>有待补充。</p>
<p>关于RN的单元测试了解得还不够深，今后还会继续完善。</p>
]]></content>
      
        
        <tags>
            
            <tag> react-native </tag>
            
            <tag> 单元测试 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[NPM私有仓库Sinopia搭建及使用]]></title>
      <url>http://little-byte.com/2017/06/14/NPM%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93Sinopia%E6%90%AD%E5%BB%BA%E5%8F%8A%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h3 id="Sinopia搭建"><a href="#Sinopia搭建" class="headerlink" title="Sinopia搭建"></a>Sinopia搭建</h3><h4 id="1-安装NodeJS及NPM"><a href="#1-安装NodeJS及NPM" class="headerlink" title="1.安装NodeJS及NPM"></a>1.安装NodeJS及NPM</h4><p>在<a href="http://nodejs.cn/download/" target="_blank" rel="external">Node.js中文网</a>选择对应的系统进行下载并安装，安装完成后即可在终端上使用npm命令<br>安装完node后建议设置npm镜像以加速后面的过程（或使用科学上网工具），设置淘宝npm镜像如下：</p>
<figure class="highlight tcl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm config <span class="keyword">set</span> <span class="keyword">registry</span> https://<span class="keyword">registry</span>.npm.taobao.org --<span class="keyword">global</span></div><div class="line">npm config <span class="keyword">set</span> disturl https://npm.taobao.org/dist --<span class="keyword">global</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="2-安装Sinopia"><a href="#2-安装Sinopia" class="headerlink" title="2.安装Sinopia"></a>2.安装Sinopia</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">npm install -g sinopia</span></div></pre></td></tr></table></figure>
<h4 id="3-启动Sinopia"><a href="#3-启动Sinopia" class="headerlink" title="3.启动Sinopia"></a>3.启动Sinopia</h4><p>在终端输入<code>sinopia</code>即可启动Sinopia服务</p>
<p><img src="http://om2bpqram.bkt.clouddn.com/1497427904017.jpg" alt="enter description here"><br>此时在浏览器输入<a href="http://localhost:4873" target="_blank" rel="external">http://localhost:4873</a> ，可以查看服务是否启动成功。</p>
<p><img src="http://om2bpqram.bkt.clouddn.com/1497428157454.jpg" alt="enter description here"></p>
<h4 id="4-Sinopia配置"><a href="#4-Sinopia配置" class="headerlink" title="4.Sinopia配置"></a>4.Sinopia配置</h4><p>Sinopia的特点是，你在哪个目录运行，它的就会在对应的目录下创建自己的文件。目录下默认有两个文件：<br><strong>config.yaml</strong> ：sinopia配置文件<br><strong>storage</strong> ，用户npm install时如果私有npm仓库中没有所需要的包，会从备用第三方库中拉取并缓存到该目录。下一次安装同样的包时就可以直接从私有npm仓库中拉取<br><strong>htpasswd</strong> ：添加用户之后自动创建<br>在第三步中可以得知sinopia配置文件路径。<br>config.yaml配置文件<br>我们需要对自动创建对配置文件进行一点修改：修改如下：</p>
<figure class="highlight yaml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># This is the default config file. It allows all users to do anything,</span></div><div class="line"><span class="comment"># so don't use it on production systems.</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Look here for more config file examples:</span></div><div class="line"><span class="comment"># https://github.com/rlidwka/sinopia/tree/master/conf</span></div><div class="line"><span class="comment">#</span></div><div class="line"></div><div class="line"><span class="comment"># path to a directory with all packages</span></div><div class="line"><span class="attr">storage:</span> <span class="string">./storage</span>  <span class="string">//npm包存放的路径</span></div><div class="line"></div><div class="line"><span class="attr">auth:</span></div><div class="line"><span class="attr">htpasswd:</span></div><div class="line"><span class="attr">file:</span> <span class="string">./htpasswd</span>   <span class="string">//保存用户的账号密码等信息</span></div><div class="line"><span class="comment"># Maximum amount of users allowed to register, defaults to "+inf".</span></div><div class="line"><span class="comment"># You can set this to -1 to disable registration.</span></div><div class="line"><span class="attr">max_users:</span> <span class="number">1000</span>  <span class="string">//默认为1000，改为-1为禁止注册，这样就只能通过修改htpasswd来注册用户</span></div><div class="line"></div><div class="line"><span class="comment"># a list of other known repositories we can talk to</span></div><div class="line"><span class="attr">uplinks:</span></div><div class="line"><span class="attr">npmjs:</span></div><div class="line"><span class="attr">url:</span> <span class="attr">http://registry.npm.taobao.org/</span>  <span class="string">//默认为npm的官网，由于国情，修改</span> <span class="string">url</span> <span class="string">让sinopia使用</span> <span class="string">淘宝的npm镜像地址</span></div><div class="line"></div><div class="line"><span class="attr">packages:</span>  <span class="string">//配置权限管理</span></div><div class="line"><span class="string">'@*/*'</span><span class="string">:</span></div><div class="line"><span class="comment"># scoped packages</span></div><div class="line"><span class="attr">access:</span> <span class="string">$all</span></div><div class="line"><span class="attr">publish:</span> <span class="string">$authenticated</span></div><div class="line"></div><div class="line"><span class="string">'*'</span><span class="string">:</span></div><div class="line"><span class="comment"># allow all users (including non-authenticated users) to read and</span></div><div class="line"><span class="comment"># publish all packages</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># you can specify usernames/groupnames (depending on your auth plugin)</span></div><div class="line"><span class="comment"># and three keywords: "$all", "$anonymous", "$authenticated"</span></div><div class="line"><span class="attr">access:</span> <span class="string">$all</span></div><div class="line"></div><div class="line"><span class="comment"># allow all known users to publish packages</span></div><div class="line"><span class="comment"># (anyone can register by default, remember?)</span></div><div class="line"><span class="attr">publish:</span> <span class="string">$authenticated</span></div><div class="line"></div><div class="line"><span class="comment"># if package is not available locally, proxy requests to 'npmjs' registry</span></div><div class="line"><span class="attr">proxy:</span> <span class="string">npmjs</span></div><div class="line"></div><div class="line"><span class="comment"># log settings</span></div><div class="line"><span class="attr">logs:</span></div><div class="line"><span class="bullet">-</span> <span class="string">&#123;type:</span> <span class="string">stdout,</span> <span class="attr">format:</span> <span class="string">pretty,</span> <span class="attr">level:</span> <span class="string">http&#125;</span></div><div class="line"><span class="comment">#- &#123;type: file, path: sinopia.log, level: info&#125;</span></div><div class="line"></div><div class="line"><span class="comment"># you can specify listen address (or simply a port) </span></div><div class="line"><span class="attr">listen:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:4873</span>  <span class="string">////默认没有，只能在本机访问，添加后可以通过外网访问。</span></div></pre></td></tr></table></figure>
<h4 id="5-通过pm2启动sinopia"><a href="#5-通过pm2启动sinopia" class="headerlink" title="5.通过pm2启动sinopia"></a>5.通过pm2启动sinopia</h4><p>直接在终端通过sinopia命令启动服务时，如果关闭终端服务就被关闭了，所以一般会借助<strong>pm2</strong>工具进行进程守护管理。</p>
<p><strong>pm2安装方式：</strong></p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">nam</span> install -g pm2</div></pre></td></tr></table></figure>
<p><strong>通过pm2启动sinopia</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pm2 start `<span class="built_in">which</span> sinopia</div></pre></td></tr></table></figure>
<p>如果需要停止sinopia服务，只需使用以下命令即可：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pm2 stop `<span class="built_in">which</span> sinopia</div></pre></td></tr></table></figure></p>
<h3 id="Sinopia的使用"><a href="#Sinopia的使用" class="headerlink" title="Sinopia的使用"></a>Sinopia的使用</h3><p>在使用sinopia之前，强烈推荐使用nrm来管理自己的npm代理，nrm可以快速修改,切换,增加npm镜像地址。<br>ps.我最终搭建的地址为<a href="http://10.10.13.15:4873" target="_blank" rel="external">http://10.10.13.15:4873</a> 请自行修改为自己的服务器ip地址<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">npm</span> install -g nrm <span class="comment"># 安装nrm</span></div><div class="line">nrm add sinopia http://10.10.13.15:4873 <span class="comment"># 添加新搭建的npm私有仓库地址</span></div><div class="line">nrm use sinopia</div></pre></td></tr></table></figure></p>
<p>nrm的其他命令：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> nrm --<span class="built_in">help</span>  <span class="comment"># 查看nrm命令帮助</span></span></div><div class="line"><span class="meta">$</span><span class="bash"> nrm list <span class="comment"># 列出可用的 npm 镜像地址</span></span></div><div class="line"><span class="meta">$</span><span class="bash"> nrm use taobao <span class="comment"># 使用`淘宝npm`镜像地址</span></span></div></pre></td></tr></table></figure></p>
<h4 id="npm-下载包"><a href="#npm-下载包" class="headerlink" title="npm 下载包"></a>npm 下载包</h4><p>切换为新搭建的私有仓库后，npm的使用方式没有任何改变，仍是使用<code>npm install xxx</code>安装我们所需要的包。如果私有仓库中没有所需要的包，会从备用的镜像中下载并缓存到本地，下一次在进行安装时会直接从私有仓库中获取。</p>
<h4 id="npm-发布包"><a href="#npm-发布包" class="headerlink" title="npm 发布包"></a>npm 发布包</h4><p>要在私有npm仓库中发布包首先需要注册或登陆账号。<br>如果还没有账号，通过输入命令 <code>npm adduser</code>，然后依次输入用户名，密码，邮箱用户即可创建完毕。<br>如果已有账号，通过输入命令 <code>npm login</code>,然后依次输入用户名，密码，邮箱用户即可登陆。<br>然后进入你要上传的代码目录，执行初始化。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> npm init</span></div></pre></td></tr></table></figure>
<p>这个过程中要输入项目名，版本号，作者，开源协议等信息，自动生成package.json文件。<br>这里可以在这里填写相关信息或者直接回车跳过，因为后续可以直接修改package.json文件。<br>此外，通过在目录内新建README文件，可添加包的使用说明和用例代码。README文件支持markdown，书写十分方便。</p>
<p>然后执行发布命令就可以发布包到私有npm仓库了。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm publish</div></pre></td></tr></table></figure>
<p>可以通过浏览器访问<strong><a href="http://10.10.13.15:4873" target="_blank" rel="external">http://10.10.13.15:4873</a></strong> 可以看到我们发布的私有包。</p>
<p><img src="http://om2bpqram.bkt.clouddn.com/1497436658630.jpg" alt="enter description here"></p>
]]></content>
      
        
        <tags>
            
            <tag> sinopia </tag>
            
            <tag> 私有npm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React Native 开发经验与常见问题总结]]></title>
      <url>http://little-byte.com/2017/06/02/React-Native-%E5%BC%80%E5%8F%91%E7%BB%8F%E9%AA%8C%E4%B8%8E%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>接触React Native才一个月有余，对这种“Learn once，Write anywhere”的移动端开发框架越来越喜爱。不敢说自己一个多月就掌握了React Native，这里只是将自己一个多月踩过的坑和一些经验心得以及教训分享记录于此，并且今后也会不断补充完善。</p>
<h2 id="使用WebStorm开发React-Native经验"><a href="#使用WebStorm开发React-Native经验" class="headerlink" title="使用WebStorm开发React Native经验"></a>使用WebStorm开发React Native经验</h2><p><strong>WebStorm</strong>个人感觉真的是最好的ReactNative 开发工具之一，特别是当你有用过AndroidStudio的情况下，使用WebStorm绝对是最好的选择。</p>
<h3 id="通过配置直接运行项目"><a href="#通过配置直接运行项目" class="headerlink" title="通过配置直接运行项目"></a>通过配置直接运行项目</h3><a id="more"></a>
<p><img src="http://om2bpqram.bkt.clouddn.com/1496385059159.jpg" alt="enter description here" title="1496385059159.jpg"><br>点击WebStorm右上角的小方框中的向下箭头，选中<strong>Edit Configurations..</strong></p>
<p><img src="http://om2bpqram.bkt.clouddn.com/1496385172176.jpg" alt="enter description here" title="1496385172176.jpg"><br>在弹出来的窗口中点击左上角的“<strong>+</strong>”按钮，下拉选项选择“<strong>React Native</strong>”</p>
<p><img src="http://om2bpqram.bkt.clouddn.com/1496385351796.jpg" alt="enter description here" title="1496385351796.jpg"><br>右侧“name”项随意填写，自己能够区分就好，默认运行目标平台为Android，因此如果要运行的目标平台为iOS将Target Platform改为iOS即可。</p>
<p><img src="http://om2bpqram.bkt.clouddn.com/1496385541594.jpg" alt="enter description here" title="1496385541594.jpg"></p>
<p>最后WebStorm可运行项目中如下</p>
<p><img src="http://om2bpqram.bkt.clouddn.com/1496385604021.jpg" alt="enter description here" title="1496385604021.jpg"><br>选中Android，点击右侧的绿色三角形按钮就可在Android模拟器或真机运行ReactNative项目了，iOS同理。<br>注意，直接运行是在你的电脑上已经安装安卓模拟器或者Xcode的前提下,运行Android端时需提前启动好Android模拟器，否则会提示找不到设备，iOS则无需该操作。此外在WebStorm中运行最常见的问题是8081端口被占用</p>
<p><img src="http://om2bpqram.bkt.clouddn.com/1496386478708.jpg" alt="enter description here" title="1496386478708.jpg"><br>此时需要在终端中通过lsof命令查找占用端口的进程PID 并通过kill 命令杀死进程。</p>
<p><img src="http://om2bpqram.bkt.clouddn.com/1496386543687.jpg" alt="enter description here" title="1496386543687.jpg"><br>最好的避免方式是在需要停止运行，点击停止按钮来停止项目运行</p>
<p><img src="http://om2bpqram.bkt.clouddn.com/1496387018926.jpg" alt="enter description here" title="1496387018926.jpg"></p>
<h3 id="在WebStorm中调试"><a href="#在WebStorm中调试" class="headerlink" title="在WebStorm中调试"></a>在WebStorm中调试</h3><p>在编写的js文件中需要调试的地方打下断点，然后通过WebStorm运行项目，ReactNative运行在模拟器运行成功后中调出调试菜单，点击<strong>Debug JS Remotely</strong>（此处使用iOS作为示例，Android基本一致）</p>
<p><img src="http://om2bpqram.bkt.clouddn.com/1496387265719.jpg" alt="enter description here" title="1496387265719.jpg"></p>
<p>此时就可以根据需要进行调试了。快捷键F8是单步调试，F7是步进调试<br>ps.在HTML标签块中打下的断点是无效的</p>
<p><img src="http://om2bpqram.bkt.clouddn.com/1496387859119.jpg" alt="enter description here" title="1496387859119.jpg"></p>
<h2 id="ListView组件中的坑"><a href="#ListView组件中的坑" class="headerlink" title="ListView组件中的坑"></a>ListView组件中的坑</h2><p>如果你在ListView中renderHeader方法中加载图片，那么在Android端会无法显示，iOS端则不会有此问题。这是React Native中的一个Bug，还没有彻底解决，详见：<br><strong><a href="https://github.com/facebook/react-native/issues/4455" target="_blank" rel="external">Render a ViewPagerAndroid in ListView.renderHeader() that the elements under ViewPagerAndroid will not display</a></strong><br>目前暂时的解决方案如下：</p>
<figure class="highlight vbscript-html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;ListView</div><div class="line">  ...</div><div class="line">  removeClippedSubviews=&#123;false&#125;</div><div class="line">/&gt;</div></pre></td></tr></table></figure>
<p> removeClippedSubviews 属性，表示如果子 View 超出可视区域，是否自动移除，默认是 true,因此设置为false显然是牺牲了一定的性能。不过目前的做法是使用FlatList替代ListView，因为FlatList比ListView提升了很多（不过FlatList是否同样有这个Bug还未测试）</p>
<h2 id="TextInput组件中的坑"><a href="#TextInput组件中的坑" class="headerlink" title="TextInput组件中的坑"></a>TextInput组件中的坑</h2><p>TextInput在iOS端必须设置<strong>height</strong>属性，否则无法获取焦点，Android端可不设置。</p>
<h2 id="关于布局与屏幕适配的一点经验"><a href="#关于布局与屏幕适配的一点经验" class="headerlink" title="关于布局与屏幕适配的一点经验"></a>关于布局与屏幕适配的一点经验</h2><ul>
<li>基本上所有组件都最好不指定宽高（图片除外，必须指定宽高否则显示图片原大小，不好控制），不指定宽高的组件将保持原大小，这点类似Android中的wrap_content.</li>
<li>React Native组件大小的数值单位是<strong>dp</strong>，不需要再进行转换</li>
</ul>
<h3 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h3><p>style中的<strong>flex</strong>是一个很有用的属性，有点类似Android中layout_weight属性</p>
<ul>
<li>在根布局中指定<strong>flex：1</strong>则表示占满全屏（view默认宽度为100%）</li>
<li>如果一层布局中有多个组件其中只有一个组件指定了<strong>flex:1</strong>则表示该组件将占据其余组件外所剩余的空间</li>
<li>如果一层布局中有多个组件指定了<strong>flex:1</strong>,则表示这些组件所占比相同</li>
</ul>
<h3 id="布局方向flexDirection"><a href="#布局方向flexDirection" class="headerlink" title="布局方向flexDirection"></a>布局方向flexDirection</h3><p>ReactNative默认布局方向为纵向column，此时justifyContent指定纵向对齐方式，alignItems指定横向对齐方式<br>横向需指定为row，justifyContent指定横向对齐方向，alignItems指定纵向对齐方式</p>
<h3 id="Image的调整模式resizeMode"><a href="#Image的调整模式resizeMode" class="headerlink" title="Image的调整模式resizeMode"></a>Image的调整模式resizeMode</h3><p>resizeMode属性可调整图片相对于容器的展现方式，默认为cover模式。根据实际情况灵活选择resizeMode。</p>
<blockquote>
<p><strong>cover模式</strong>只求在显示比例不失真的情况下填充整个显示区域。可以对图片进行放大或者缩小，超出显示区域的部分不显示，<br>也就是说，图片可能部分会显示不了。<br> <strong>contain模式</strong>是要求显示整张图片, 可以对它进行等比缩小,<br>图片会显示完整,可能会露出Image控件的底色。 如果图片宽高都小于控件宽高，则不会对图片进行放大。<br><strong>stretch模式</strong>不考虑保持图片原来的宽,高比.填充整个Image定义的显示区域,这种模式显示的图片可能会畸形和失真。<br> <strong>center模式,</strong> 9月11号的0.33版本才支持，contain模式基础上支持等比放大。</p>
</blockquote>
<p><strong>一点经验</strong>：</p>
<ul>
<li>如果要求图片完整展示，并且图片比较接近纯色或者画面条理不是十分清晰，可以选择stretch。</li>
<li>如果原图片大于展示区域，使用默认的cover会导致一部分图片区域丢失(丢失区域与设置的justifyContent和alignItems有关），如果图片边缘区域不重要可以使用cover模式</li>
<li>使用contain模式最好保证图片展示区域与图片的宽高比例相同，否则会有意想不到的适配问题。</li>
</ul>
<h2 id="iOS-获取网络信息API-的坑"><a href="#iOS-获取网络信息API-的坑" class="headerlink" title="iOS 获取网络信息API 的坑"></a>iOS 获取网络信息API 的坑</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">NetInfo.isConnected.fetch().done(<span class="function">(<span class="params">isConnected</span>) =&gt;</span> &#123;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>在iOS中，这个方法返回值一直是false，在Android中正常</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">NetInfo.fetch().done( <span class="function">(<span class="params">connectionInfo</span>) =&gt;</span> &#123; &#125; );</div></pre></td></tr></table></figure>
<p>在iOS中，这个方法返回值一直是unknown，在Android中正常</p>
<p>因此可以通过添加网络监听来判断网络是否可用。<br>当然还有其他办法，具体可参考：<a href="https://github.com/facebook/react-native/issues/8615" target="_blank" rel="external">https://github.com/facebook/react-native/issues/8615</a><br>以下是其中以一个解决办法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleFirstConnectivityChange</span>(<span class="params">isConnected</span>) </span>&#123;</div><div class="line">	<span class="keyword">if</span> (!sConnected) &#123;</div><div class="line">	 <span class="comment">// do action</span></div><div class="line">  	&#125;</div><div class="line">  	NetInfo.isConnected.removeEventListener(<span class="string">'change'</span>, handleFirstConnectivityChange);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span> (Platform.OS === <span class="string">'ios'</span>) &#123;</div><div class="line">  	NetInfo.isConnected.addEventListener(<span class="string">'change'</span>, handleFirstConnectivityChange);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  	NetInfo.isConnected.fetch().then(<span class="function"><span class="params">isConnected</span> =&gt;</span> &#123;</div><div class="line">  	<span class="keyword">if</span> (!sConnected) &#123;</div><div class="line">    	<span class="comment">// do action</span></div><div class="line"> 	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="时间转换"><a href="#时间转换" class="headerlink" title="时间转换"></a>时间转换</h2><p>在项目中遇到将yyyy-MM-dd hh:mm:ss格式的时间字符串转换成Date类型遇到了问题。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(timeStr);</div></pre></td></tr></table></figure>
<p>该方法在Android/iOS模拟器或真机上转换出来的date 值为 Invalid Date(Android)/NaN(iOS)，在调试模式这个值的却完全正常的。如今也让人不得解。解决办法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.parse(timeStr.replace(<span class="regexp">/-/g</span>, <span class="string">"/"</span>)));</div></pre></td></tr></table></figure></p>
<p>使用该方法进行时间转换。</p>
<h2 id="页面卡顿的一个解决办法"><a href="#页面卡顿的一个解决办法" class="headerlink" title="页面卡顿的一个解决办法"></a>页面卡顿的一个解决办法</h2><p>InteractionManager.runAfterInteractions 方法可以让我们在页面的所有动画执行完后再获取数据<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">componentDidMount() &#123;</div><div class="line">       InteractionManager.runAfterInteractions(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">           <span class="keyword">this</span>._getListData().done()</div><div class="line">       &#125;)</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<h2 id="RN加载首屏白屏明显"><a href="#RN加载首屏白屏明显" class="headerlink" title="RN加载首屏白屏明显"></a>RN加载首屏白屏明显</h2><p>使用预加载。白屏出现主要是因为jsBundle加载到内存中耗时会比较长。RN原本的做法是第一次打开RN页面后才去加载jsBundle，而我们可以用空间换时间到做法，在应用启动时就加载jsBundle到内存中。</p>
<h2 id="其他，以后会继续补充完善…"><a href="#其他，以后会继续补充完善…" class="headerlink" title="其他，以后会继续补充完善…"></a>其他，以后会继续补充完善…</h2>]]></content>
      
        
        <tags>
            
            <tag> react-native </tag>
            
            <tag> 经验 </tag>
            
            <tag> 常见问题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ReactNative-CodePush实践小结]]></title>
      <url>http://little-byte.com/2017/06/01/ReactNative-CodePush%E5%AE%9E%E8%B7%B5%E5%B0%8F%E7%BB%93/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>CodePush</strong>是微软提供的一套可用于React Native和Cordova的热更新服务，国内也有类似的服务<strong>Pushy</strong>，从关注度和使用人数来说，CodePush完胜于Pushy（截至目前，CodePush在Github上Star数2900+，Pushy Star数600+，毕竟大公司的产品更让开发者心里有底，但CodePush是否真的绝对比Pushy要好不做评价）</p>
<h2 id="CodePush-安装与注册"><a href="#CodePush-安装与注册" class="headerlink" title="CodePush 安装与注册"></a>CodePush 安装与注册</h2><h3 id="1-安装-CodePush-CLI"><a href="#1-安装-CodePush-CLI" class="headerlink" title="1.安装 CodePush CLI"></a>1.安装 CodePush CLI</h3><p>使用命令<code>npm install -g code-push-cli</code>安装CodePush终端</p>
<p>ps.都在开发React Native了，npm安装就无需赘言了吧。</p>
<h3 id="2-注册CodePush-账号"><a href="#2-注册CodePush-账号" class="headerlink" title="2.注册CodePush 账号"></a>2.注册CodePush 账号</h3><p>CodePush终端安装完成后就可以使用<code>code-push</code>命令了。<br>在终端输入<code>code-push register</code>，会跳转授权网页。在这个网页可以选择Github。或者微软作为授权提供者，不过我觉得90%的开发者都会选择Github。<br><a id="more"></a><br><img src="http://om2bpqram.bkt.clouddn.com/1496284115079.jpg" alt="enter description here"></p>
<p>授权完成后，CodePush会显示你的<strong>Access Key</strong>，复制输入到终端即可完成注册并登陆。<br>ps.只要不主动退出(通过<code>code-push logout</code>命令)，登陆状态会一直有效。</p>
<p><img src="http://om2bpqram.bkt.clouddn.com/1496284247053.jpg" alt="enter description here"></p>
<p><img src="http://om2bpqram.bkt.clouddn.com/1496284287922.jpg" alt="enter description here"></p>
<h2 id="在CodePush服务器中创建App"><a href="#在CodePush服务器中创建App" class="headerlink" title="在CodePush服务器中创建App"></a>在CodePush服务器中创建App</h2><p>在终端输入<code>code-push app add &lt;appName&gt;</code>即可完成创建，注册完成之后会返回一套deployment key，包括Staging和Production。该key在后面步骤中会用到。</p>
<p><img src="http://om2bpqram.bkt.clouddn.com/1496284777374.jpg" alt="enter description here"></p>
<blockquote>
<p>心得：如果你的应用分为Android和iOS版，那么在向CodePush注册应用的时候需要注册两个App获取两套deployment key，如：<br> code-push app add AppDemo-Android<br>code-push app add AppDemo-iOS<br>因为发布的时候使用的打包命令是有所不同的，因此需要做区分。</p>
</blockquote>
<p>code-push相关常见命令如下：</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Usage: code-push <span class="keyword">app</span> &lt;command&gt;</div><div class="line">命令：</div><div class="line">  add       创建一个新的<span class="keyword">App</span></div><div class="line">  remove    删除<span class="keyword">App</span></div><div class="line">  <span class="keyword">rm</span>        删除<span class="keyword">App</span></div><div class="line">  <span class="keyword">rename</span>    重命名已经存在<span class="keyword">App</span></div><div class="line">  <span class="keyword">list</span>      列出与你账户关联的所有<span class="keyword">App</span></div><div class="line">  <span class="keyword">ls</span>        列出与你账户关联的所有<span class="keyword">App</span></div><div class="line">  transfer  将一个<span class="keyword">App</span>的所有权转让给另一个帐户</div></pre></td></tr></table></figure>
<h2 id="CodePush集成"><a href="#CodePush集成" class="headerlink" title="CodePush集成"></a>CodePush集成</h2><p>这里跟进使用端分<strong>Android集成</strong>和<strong>iOS集成</strong>，但二者都有共通的部分</p>
<ul>
<li>在React Native项目中安装codePush依赖：<code>npm install --save react-native-code-push</code></li>
<li><p>通过react-native link命令自动构建关联，这里会要求输入 deployment key，直接Enter跳过即可，因为我们会在后续步骤中通过更加灵活的方式配置</p>
<p>接下来的步骤，AndroidiOS有所不同，因此分开来说。</p>
</li>
</ul>
<h3 id="Android端集成"><a href="#Android端集成" class="headerlink" title="Android端集成"></a>Android端集成</h3><ol>
<li>打开android/app/build.gradle文件，修改android-buildTypes节点成如下</li>
</ol>
<figure class="highlight scilab"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">buildTypes &#123;</div><div class="line">       debug&#123;</div><div class="line">		<span class="comment">//省略了其他配置</span></div><div class="line">           buildConfigField <span class="string">"String"</span>, <span class="string">"CODEPUSH_KEY"</span>, <span class="string">'"</span><span class="string">"'</span></div><div class="line">       &#125;</div><div class="line">       releaseStaging &#123;</div><div class="line">           buildConfigField <span class="string">"String"</span>, <span class="string">"CODEPUSH_KEY"</span>, <span class="string">'"</span>此处填写Staging key<span class="string">"'</span></div><div class="line">       &#125;</div><div class="line">       release &#123;</div><div class="line">		<span class="comment">//省略了其他配置</span></div><div class="line">           buildConfigField <span class="string">"String"</span>, <span class="string">"CODEPUSH_KEY"</span>, <span class="string">'"</span>此处填写Production key<span class="string">"'</span></div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<ol>
<li>在android/app/build.gradle设置好deployment-key之后呢,我们就可以使用了:<br>修改MainApplication.java文件中的getPackages()方法为如下：</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> List&lt;ReactPackage&gt; <span class="title">getPackages</span><span class="params">()</span> </span>&#123;</div><div class="line">           <span class="keyword">return</span> Arrays.&lt;ReactPackage&gt;asList(</div><div class="line">                   <span class="keyword">new</span> MainReactPackage(),</div><div class="line">                   <span class="keyword">new</span> RCTSwipeRefreshLayoutPackage(),</div><div class="line">                   <span class="keyword">new</span> VectorIconsPackage(),</div><div class="line">                   <span class="keyword">new</span> CodePush(BuildConfig.CODEPUSH_KEY, MainApplication.<span class="keyword">this</span>, BuildConfig.DEBUG)<span class="comment">// Add/change this line.</span></div><div class="line">           );</div><div class="line">       &#125;</div></pre></td></tr></table></figure>
<p>3.修改VersionName<br>在 android/app/build.gradle中有个 android.defaultConfig.versionName属性，我们需要把 应用版本改成 三位，比如<strong>1.0</strong>，需要修改成<strong>1.0.0</strong></p>
<p>至此，CodePush在Android端的集成工作已经完成了。</p>
<h3 id="iOS端集成"><a href="#iOS端集成" class="headerlink" title="iOS端集成"></a>iOS端集成</h3><ol>
<li>使用Xcode打开项目，Xcode的项目导航视图中的PROJECT下选择你的项目， 选择Info页签 ，在Configurations节点下单击 + 按钮 ，选择Duplicate “Release Configaration ， 输入Staging。</li>
</ol>
<p><img src="http://om2bpqram.bkt.clouddn.com/1496288208995.jpg" alt="enter description here"></p>
<ol>
<li>在build Settings页签中单击 + 按钮然后选择添加User-Defined Setting，然后输入CODEPUSH_KEY(名称随意)，然后填入deployment key。</li>
</ol>
<blockquote>
<p> ps.可以通过<code>code-push deployment ls Flow800-Android -k</code>查看deployment key</p>
</blockquote>
<p><img src="http://om2bpqram.bkt.clouddn.com/1496288348109.jpg" alt="enter description here"></p>
<p><img src="http://om2bpqram.bkt.clouddn.com/1496288455133.jpg" alt="enter description here"></p>
<p>3.打开 Info.plist文件，在CodePushDeploymentKey中输入$(CODEPUSH_KEY)，并修改Bundle versions为三位，如下图</p>
<p><img src="http://om2bpqram.bkt.clouddn.com/1496288738755.jpg" alt="enter description here"></p>
<p>至此，iOS端集成也完成了。</p>
<h2 id="使用react-native-code-psuh进行热更新"><a href="#使用react-native-code-psuh进行热更新" class="headerlink" title="使用react-native-code-psuh进行热更新"></a>使用react-native-code-psuh进行热更新</h2><p>该配置的都已经配置完了，接下来就是使用了。<br>在使用之前需要考虑的是检查更新时机，更新是否强制，更新是否要求即时等等。</p>
<h3 id="更新时机"><a href="#更新时机" class="headerlink" title="更新时机"></a>更新时机</h3><p>一般常见的应用内更新时机分为两种，一种是打开APP就检查更新，一种是放在设置界面让用户主动检查更新并安装。</p>
<ul>
<li><strong>打开APP就检查更新</strong><br> 最为简单的使用方式在React Natvie的根组件的componentDidMount方法中通过<br> codePush.sync()（需要先导入codePush包：import codePush from ‘react-native-code-push’）方法检查并安装更新，如果有更新包可供下载则会在重启后生效。不过这种下载和安装都是静默的，即用户不可见。如果需要用户可见则需要额外的配置。具体可以参考codePush官方API文档，下面是个人的一些实践过的配置：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">codePush.sync(&#123;</div><div class="line">      <span class="attr">updateDialog</span>: &#123;</div><div class="line">        <span class="attr">appendReleaseDescription</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">descriptionPrefix</span>:<span class="string">'\n\n更新内容：\n'</span>,</div><div class="line">        <span class="attr">title</span>:<span class="string">'更新'</span>,</div><div class="line">        <span class="attr">mandatoryUpdateMessage</span>:<span class="string">''</span>,</div><div class="line">        <span class="attr">mandatoryContinueButtonLabel</span>:<span class="string">'更新'</span>,</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">mandatoryInstallMode</span>:codePush.InstallMode.IMMEDIATE,</div><div class="line">      <span class="attr">deploymentKey</span>: CODE_PUSH_PRODUCTION_KEY,</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<p>上面的配置在检查更新时会弹出提示对话框， mandatoryxxx表示强制更新，appendReleaseDescription表示在发布更新时的描述会显示到更新对话框上让用户可见</p>
<p>来个更加接近实际应用的：在用户点击<strong>检查更新</strong>按钮后进行检查，如果有更新则弹出提示框让用户选择是否更新，如果用户点击<strong>立即更新</strong>按钮，则会进行安装包的下载（实际上这时候应该显示下载进度，这里省略了）下载完成后会立即重启并生效（也可配置稍后重启）<br>ps.这里面还有个神坑，下文再说。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">codePush.checkForUpdate(deploymentKey).then(<span class="function">(<span class="params">update</span>) =&gt;</span> &#123;</div><div class="line">                            <span class="keyword">if</span> (!update) &#123;</div><div class="line">                                Alert.alert(<span class="string">"提示"</span>, <span class="string">"已是最新版本--"</span>, [</div><div class="line">                                    &#123;</div><div class="line">                                        <span class="attr">text</span>: <span class="string">"Ok"</span>, <span class="attr">onPress</span>: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">                                        <span class="built_in">console</span>.log(<span class="string">"点了OK"</span>);</div><div class="line">                                    &#125;</div><div class="line">                                    &#125;</div><div class="line">                                ]);</div><div class="line">                            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                                codePush.sync(&#123;</div><div class="line">                                        <span class="attr">deploymentKey</span>: deploymentKey,</div><div class="line">                                        <span class="attr">updateDialog</span>: &#123;</div><div class="line">                                            <span class="attr">optionalIgnoreButtonLabel</span>: <span class="string">'稍后'</span>,</div><div class="line">                                            <span class="attr">optionalInstallButtonLabel</span>: <span class="string">'立即更新'</span>,</div><div class="line">                                            <span class="attr">optionalUpdateMessage</span>: <span class="string">'有新版本了，是否更新？'</span>,</div><div class="line">                                            <span class="attr">title</span>: <span class="string">'更新提示'</span></div><div class="line">                                        &#125;,</div><div class="line">                                        <span class="attr">installMode</span>: codePush.InstallMode.IMMEDIATE,</div><div class="line"></div><div class="line">                                    &#125;,</div><div class="line">                                    (status) =&gt; &#123;</div><div class="line">                                        <span class="keyword">switch</span> (status) &#123;</div><div class="line">                                            <span class="keyword">case</span> codePush.SyncStatus.DOWNLOADING_PACKAGE:</div><div class="line">                                                <span class="built_in">console</span>.log(<span class="string">"DOWNLOADING_PACKAGE"</span>);</div><div class="line">                                                <span class="keyword">break</span>;</div><div class="line">                                            <span class="keyword">case</span> codePush.SyncStatus.INSTALLING_UPDATE:</div><div class="line">                                                <span class="built_in">console</span>.log(<span class="string">" INSTALLING_UPDATE"</span>);</div><div class="line">                                                <span class="keyword">break</span>;</div><div class="line">                                        &#125;</div><div class="line">                                    &#125;,</div><div class="line">                                    (progress) =&gt; &#123;</div><div class="line">                                        <span class="built_in">console</span>.log(progress.receivedBytes + <span class="string">" of "</span> + progress.totalBytes + <span class="string">" received."</span>);</div><div class="line">                                    &#125;</div><div class="line">                                );</div><div class="line">                            &#125;</div><div class="line">                    &#125;</div></pre></td></tr></table></figure>
<h3 id="更新是否强制"><a href="#更新是否强制" class="headerlink" title="更新是否强制"></a>更新是否强制</h3><p>如果是强制更新需要在发布的时候指定，发布命令中配置<code>--m true</code>，下文在细说</p>
<h3 id="更新是否要求即时"><a href="#更新是否要求即时" class="headerlink" title="更新是否要求即时"></a>更新是否要求即时</h3><p>在更新配置中通过指定installMode来决定安装完成的重启时机，亦即更新生效时机</p>
<ul>
<li><strong>codePush.InstallMode.IMMEDIATE</strong>：表示安装完成立即重启更新</li>
<li><strong>codePush.InstallMode.ON_NEXT_RESTART</strong>：表示安装完成后会在下次重启后进行更新</li>
<li><strong>codePush.InstallMode.ON_NEXT_RESUME</strong>：表示安装完成后会在应用进入后台后重启更新</li>
</ul>
<h2 id="发布CodePush更新包"><a href="#发布CodePush更新包" class="headerlink" title="发布CodePush更新包"></a>发布CodePush更新包</h2><p>codepush的更新包发布其实很简单。在终端输入命令</p>
<figure class="highlight vbscript-html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">code-push release-react &lt;Appname&gt; &lt;Platform&gt; --t &lt;本更新包面向的旧版本号&gt; --des &lt;本次更新说明&gt;</div></pre></td></tr></table></figure>
<p>CodePush默认是更新 Staging 环境的，如果发布生产环境的更新包，需要指定–d参数：<code>--d Production</code> ，如果发布的是强制更新包，需要加上 <code>--m true</code>强制更新</p>
<p>示例：<br><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">code</span><span class="literal">-</span><span class="comment">push</span> <span class="comment">release</span><span class="literal">-</span><span class="comment">react</span> <span class="comment">Flow800</span><span class="literal">-</span><span class="comment">Android</span> <span class="comment">android</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">t</span> <span class="comment">2</span><span class="string">.</span><span class="comment">0</span><span class="string">.</span><span class="comment">0</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">dev</span> <span class="comment">false</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">d</span> <span class="comment">Production</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">des</span> <span class="comment">"1</span><span class="string">.</span><span class="comment">全新页面\n2</span><span class="string">.</span><span class="comment">上线流量商城\n3</span><span class="string">.</span><span class="comment">已知bug修复"</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">m</span> <span class="comment">ture</span></div></pre></td></tr></table></figure></p>
<p>常用部署命令如下：</p>
<figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Usage: code-push deployment &lt;command&gt;</div><div class="line">命令：</div><div class="line">  add      在已存在的<span class="keyword">App</span>中创建一个部署</div><div class="line">  <span class="keyword">clear</span>    清除与部署相关的发布历史记录</div><div class="line">  remove   在<span class="keyword">App</span>中删除一个部署</div><div class="line">  <span class="keyword">rm</span>       在<span class="keyword">App</span>中删除一个部署</div><div class="line">  <span class="keyword">rename</span>   重命名一个已存在的部署</div><div class="line">  <span class="keyword">list</span>     列出<span class="keyword">App</span>中的所有部署</div><div class="line">  <span class="keyword">ls</span>       列出<span class="keyword">App</span>中的所有部署</div><div class="line">  history  列出一个部署的发布历史记录</div><div class="line">  <span class="keyword">h</span>        列出一个部署的发布历史记录</div></pre></td></tr></table></figure>
<p>至此，一个完整的发布，检查，安装流程已经基本描述完了。下面来看下更新的效果：</p>
<p><img src="http://om2bpqram.bkt.clouddn.com/update.gif" alt="enter description here"></p>
<h2 id="实践经验小结"><a href="#实践经验小结" class="headerlink" title="实践经验小结"></a>实践经验小结</h2><ol>
<li><p>在Android端进行调试时，在更新之前需要修改Debug Server地址和端口为任意字符串，让其访问不到真正Debug Server，否则更新重启后，就直接访问了Debug Server导致新的安装包没有安装上。<br><img src="http://om2bpqram.bkt.clouddn.com/1496299813860.jpg" alt="enter description here"><br>也可以直接打Android离线包，这样子就不需要理会Debug Server的影响</p>
</li>
<li><p>在iOS端调试时，需要打离线包并拖拽到Xcode工程中。<br>打包命令：</p>
</li>
</ol>
<figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">react</span><span class="literal">-</span><span class="comment">native</span> <span class="comment">bundle</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">entry</span><span class="literal">-</span><span class="comment">file</span> <span class="comment">index</span><span class="string">.</span><span class="comment">ios</span><span class="string">.</span><span class="comment">js</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">bundle</span><span class="literal">-</span><span class="comment">output</span> <span class="string">.</span><span class="comment">/bundle/ios/main</span><span class="string">.</span><span class="comment">jsbundle</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">platform</span> <span class="comment">ios</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">assets</span><span class="literal">-</span><span class="comment">dest</span> <span class="string">.</span><span class="comment">/bundle/ios</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">dev</span> <span class="comment">false</span></div></pre></td></tr></table></figure>
<p><img src="http://om2bpqram.bkt.clouddn.com/1496301251075.jpg" alt="enter description here"><br>拖拽完成后目录结构如上。<br>此外，还需要对AppDelegate.m文件进行修改：</p>
<p><img src="http://om2bpqram.bkt.clouddn.com/1496301458140.jpg" alt="enter description here"><br>否则更新重启后还是旧版的App。</p>
<p>3.发布更新包时，切记–t参数指定的是本次更新包的目标版本号，而不是本次更新包的版本号</p>
<p>4.如果不是在根组件的componentDidMount()方法通过codePush.sync()方法进行更新检查与安装，比如像我在设置中通过一个<strong>检查更新</strong>按钮，这时候就需要十分小心了。必须在根组件的componentDidMount()方法中添加 <code>codePush.notifyAppReady()</code>，否则应用会出现第一次重启是更新版，第二次重启又回滚到旧版的现象。</p>
<p>5.一个App通常不会是一个人开发，因此codePush添加合作者是很常见的。通过 <code>code-push collaborator</code>来操作合作者相关命令。</p>
<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">Usage:</span> code-<span class="keyword">push</span> collaborator &lt;command&gt;</div><div class="line">命令：</div><div class="line">  <span class="keyword">add</span>     对指定的项目添加一个新的合作者</div><div class="line">  remove  删除指定的项目中的合作者</div><div class="line">  rm      删除指定的项目中的合作者</div><div class="line">  list    列出指定项目中的所有合作者</div><div class="line">  ls      列出指定项目中的所有合作者</div><div class="line">示例:</div><div class="line">    code-<span class="keyword">push</span> collaborator <span class="keyword">add</span> AppDemo foo@bar.com 添加一个合作者foo@bar.com到AppDemo这个App中</div></pre></td></tr></table></figure>
<p>6.最后说一下CodePush的缺陷，因为是国外服务器，所以有时候下载速度并不是很理想。此外CodePush现在是免费服务，以后会不会收费还是个未知数。因此已经有人提出了自建codePush服务器，可见于此：<a href="https://github.com/lisong/code-push-server" target="_blank" rel="external"><strong>code-push-server</strong></a></p>
<p>更多常见问题及API使用方法请参见以下资料</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://microsoft.github.io/code-push/docs/react-native.html" target="_blank" rel="external">微软官方ReactNative CodePush文档</a><br><a href="http://www.jianshu.com/p/9e3b4a133bcc" target="_blank" rel="external">React Native热更新部署/热更新-CodePush最新集成总结(新)</a><br><a href="https://github.com/Microsoft/react-native-code-push" target="_blank" rel="external">react-native-code-push Github</a><br>基本上所有问题都可以在官方文档或者github的issue中找到答案。</p>
]]></content>
      
        
        <tags>
            
            <tag> react-native </tag>
            
            <tag> codePush </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ReactNative学习路线]]></title>
      <url>http://little-byte.com/2017/05/15/ReactNative%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</url>
      <content type="html"><![CDATA[<h2 id="第一步-React-js基础学习"><a href="#第一步-React-js基础学习" class="headerlink" title="第一步 React.js基础学习"></a>第一步 React.js基础学习</h2><p>只推荐<strong><a href="http://www.runoob.com/react/react-tutorial.html" target="_blank" rel="external">菜鸟教程</a></strong>，章节分明有条理，讲解得也非常清晰，并且附带可以在线运行的实例。学习时间：0.5～1天基本可以完成学习</p>
<h2 id="第二步-ES6-语法特性"><a href="#第二步-ES6-语法特性" class="headerlink" title="第二步 ES6 语法特性"></a>第二步 ES6 语法特性</h2><p>推荐搭配WebStorm 编写示例学习，可在WebStorm 直接运行ReactJs</p>
<p>推荐文章：<br><strong><a href="http://www.jianshu.com/p/ebfeb687eb70#" target="_blank" rel="external">30分钟掌握ES6/ES2015核心内容</a></strong><br><a href="http://bbs.reactnative.cn/topic/15/react-react-native-%E7%9A%84es5-es6%E5%86%99%E6%B3%95%E5%AF%B9%E7%85%A7%E8%A1%A8" target="_blank" rel="external"><strong>React/React Native 的ES5 ES6写法对照表</strong></a><br><a id="more"></a><br>除了上面这两篇文章提到的内容，最好还了解一下比较有用的包括集合，proxy，promise。</p>
<blockquote>
<p>ps.ES6语法特性的学习是必不可少的，否则代码看得一知半解的对后续的学习会有很大阻碍。</p>
</blockquote>
<h2 id="第三步-React-Native基础"><a href="#第三步-React-Native基础" class="headerlink" title="第三步 React Native基础"></a>第三步 React Native基础</h2><p>比较推荐这个，<br><a href="http://www.lcode.org/react-native/" target="_blank" rel="external"><strong>江清清的技术专栏：React Native专题</strong></a></p>
<p>与React Native中文网的文档相比更加符合初学者，例子更加简单和完整，不会像React Native中文网的文档那样看得一知半解，看完了还不知道怎么用，用在哪。不是说React Native中文网的文档一无是处，在有一定基础的时候在看文档或者在编写项目的时候参考一下文档是大有益处的。</p>
<h2 id="第四步-React-Native开源项目学习"><a href="#第四步-React-Native开源项目学习" class="headerlink" title="第四步 React Native开源项目学习"></a>第四步 React Native开源项目学习</h2><p>React Native基础学习完了，就是时候了解一下一个完整的React Native项目是怎么编写的，通过React Native开源项目是最好的途径。<br>这里推荐几个齐全的总结：<br><a href="https://github.com/reactnativecn/react-native-guide" target="_blank" rel="external"><strong>React-Native学习指南</strong></a>：Github ✨8700+,不过作者有几个月没更新了，一些收集的内容也比较旧了，选择性的学习较新的内容，比较推荐<strong>开源APP</strong>部分<br><a href="https://github.com/crazycodeboy/react-native-awesome" target="_blank" rel="external"><strong>React Native 学习资源精选仓库(汇聚知识，分享精华)</strong></a>：Github ✨500+，作者更新也很勤快。<br><a href="https://github.com/LeoMobileDeveloper/ReactNativeMaterials" target="_blank" rel="external"><strong>ReactNativeMaterials</strong></a>：Github ✨160+,分类齐全<br><a href="https://github.com/MarnoDev/react-native-open-project" target="_blank" rel="external"><strong>React Native 优秀开源项目大全</strong></a>：Github ✨380+,分类齐全</p>
<h3 id="开源项目参考学习的选择"><a href="#开源项目参考学习的选择" class="headerlink" title="开源项目参考学习的选择"></a>开源项目参考学习的选择</h3><p>综合考虑Github Star数和最后更新时间。</p>
<h3 id="开源项目运行常见问题"><a href="#开源项目运行常见问题" class="headerlink" title="开源项目运行常见问题"></a>开源项目运行常见问题</h3><ul>
<li><strong>npm install 错误</strong></li>
</ul>
<figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">npm ERR! Darwin 15.6.0</div><div class="line">npm ERR! argv &quot;/usr/local/bin/node&quot; &quot;/usr/local/bin/npm&quot; &quot;install&quot;</div><div class="line">npm ERR! node v4.2.1</div><div class="line">npm ERR! npm v2.14.7</div><div class="line">npm ERR! code EPEERINVALID</div><div class="line"></div><div class="line">npm ERR! peerinvalid The package react@16.0.0-alpha.6 does not satisfy its siblings&apos; peerDependencies requirements!</div><div class="line">....</div><div class="line">....</div></pre></td></tr></table></figure>
<p>这种情况通常是依赖库版本不兼容造成的。</p>
<pre><code>- 删除node_modules文件夹，重新运行npm install
- 仔细查看版本要求提示，修改为要求的版本即可，有时候版本号通常会有个“^”，某些情况下去掉该符号并指定确定的版本也可以解决问题。 
</code></pre><ul>
<li><strong>react-native run-android出错</strong><ul>
<li>运行<code>react-native link</code>生成必要的关联工程</li>
<li>确保Android模拟器或真机已连接，同时也可以使用Android Studio打开React Native工程的android目录，让Android Studio检查哪里有问题</li>
</ul>
</li>
</ul>
<h2 id="React-Native项目开发IDE的选择"><a href="#React-Native项目开发IDE的选择" class="headerlink" title="React Native项目开发IDE的选择"></a>React Native项目开发IDE的选择</h2><ul>
<li>如果曾经开发过Android，那么<a href="https://www.jetbrains.com/webstorm/" target="_blank" rel="external"><strong>WebStorm</strong></a>是不二选择。用过Android Studio可以无缝切换到WebStorm。WebStorm需要激活，激活方法见此：<a href="http://idea.lanyus.com/" target="_blank" rel="external">传送门</a></li>
<li>如果是前端开发者，可以使用<a href="https://atom.io/" target="_blank" rel="external"><strong>Atom</strong></a>+<strong>Nuclide</strong>，具体可参考： <a href="http://blog.csdn.net/hello_hwc/article/details/51612139" target="_blank" rel="external">React Native开发之IDE（Atom+Nuclide）安装，运行，调试</a></li>
</ul>
]]></content>
      
        
        <tags>
            
            <tag> react-native </tag>
            
            <tag> 学习路线 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Tinker调研]]></title>
      <url>http://little-byte.com/2017/02/28/Tinker%E8%B0%83%E7%A0%94/</url>
      <content type="html"><![CDATA[<h2 id="Tinker与其他热修复框架对比"><a href="#Tinker与其他热修复框架对比" class="headerlink" title="Tinker与其他热修复框架对比"></a>Tinker与其他热修复框架对比</h2><p><img src="http://om2bpqram.bkt.clouddn.com/1488428148337.jpg" alt=""></p>
<p><strong>总结</strong>：</p>
<ol>
<li><strong>阿里的AndFix</strong>作为native解决方案，首先面临的是稳定性与兼容性问题，更重要的是它无法实现类替换，它是需要大量额外的开发成本的；</li>
<li><strong>美团的Robust</strong>兼容性与成功率最高，但是它与AndFix一样，无法新增变量与类只能用做的bugFix方案，并且尚未开源，不过有参照Robust的install run原理实现的<a href="https://github.com/fourbrother/Robust" target="_blank" rel="external">开源方案</a>，不过较少人关注，实际效果未知。</li>
<li><strong>百度金融的RocooFix</strong>是Nuwa方案的改良版，增加了lib替换和即时生效支持，但是不支持在windows平台生成补丁，兼容性还有待测试。</li>
<li><strong>饿了么的Amigo</strong>是非常强大的一个方案，不仅是类替换，lib替换，资源替换都支持，同时也支持新增四大组件，缺点是不支持Android 3.0 ，notification &amp; widget中RemoteViews的自定义布局不支持修改,只支持内容修复。<a id="more"></a>
Amigo官方wiki介绍</li>
</ol>
<blockquote>
<p>Amigo 原理与 QQZone<br>的方案有些类似，QQZone,Tinker,Nuwa这类方案是通过修改PathClassLoader中的dex实现的，Amigo则是釜底抽薪直接替换ClassLoader。同时进一步实现了<br>so 文件、资源文件、四大组件的修复，可以对APP全面进行修复</p>
</blockquote>
<ol>
<li><strong>微信的Tinker</strong>是各方面都比较优秀的方案，毕竟经过了几亿微信用户的验证。Tinker的优点上图已经很明确了，而存在的缺陷有以下几方面：</li>
</ol>
<ul>
<li>Tinker不支持修改AndroidManifest.xml，Tinker不支持新增四大组件；  </li>
<li>由于Google Play的开发者条款限制，不建议在GP渠道动态更新代码；</li>
<li>在Android N上，补丁对应用启动时间有轻微的影响；</li>
<li>不支持部分三星android-21机型，加载补丁时会主动抛出”TinkerRuntimeException:checkDexInstall failed”；</li>
<li>由于各个厂商的加固实现并不一致，在1.7.6以及之后的版本，tinker不再支持加固的动态更新；（由于360电子市场必须经过加固应用才能上架，因此可以说tinker无法在360渠道上的apk实现热更新）</li>
<li>对于资源替换，不支持修改remoteView。例如transition动画，notification icon以及桌面图标。</li>
<li>与超级补丁技术一样，不支持即时生效，必须通过重启应用的方式才能生效。</li>
<li>需要给应用开启新的进程才能进行合并，并且很容易因为内存消耗等原因合并失败。</li>
<li>合并时占用额外磁盘空间，对于多DEX的应用来说，如果修改了多个DEX文件，就需要下发多个patch.dex与对应的classes.dex进行合并操作时这种情况会更严重，因此合并过程的失败率也会更高。</li>
<li>接入tinker sdk略微复杂</li>
</ul>
<h2 id="Tinker接入"><a href="#Tinker接入" class="headerlink" title="Tinker接入"></a>Tinker接入</h2><h3 id="1-添加gradle依赖"><a href="#1-添加gradle依赖" class="headerlink" title="1. 添加gradle依赖"></a>1. 添加gradle依赖</h3><ol>
<li>首先在项目的<strong>gradle.properties</strong>文件指定Tinker版本，这样只需修改此处版本号就能更改Tinker版本。加入以下属性：</li>
</ol>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attr">TINKER_VERSION</span>=<span class="number">1.7</span>.<span class="number">7</span></div></pre></td></tr></table></figure>
<ol>
<li>在项目的<strong>build.gradle</strong>中，添加<em>tinker-patch-gradle-plugin</em>的依赖</li>
</ol>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">classpath</span> <span class="string">"com.tencent.tinker:tinker-patch-gradle-plugin:<span class="variable">$&#123;TINKER_VERSION&#125;</span>"</span></div></pre></td></tr></table></figure>
<ol>
<li>然后在app的gradle文件<strong>app/build.gradle</strong>，我们需要添加tinker的库依赖以及apply tinker的gradle插件.</li>
</ol>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">compile(<span class="string">"com.tencent.tinker:tinker-android-lib:<span class="subst">$&#123;TINKER_VERSION&#125;</span>"</span>) &#123; <span class="attr">changing</span> = <span class="literal">true</span> &#125;</div><div class="line">provided(<span class="string">"com.tencent.tinker:tinker-android-anno:<span class="subst">$&#123;TINKER_VERSION&#125;</span>"</span>) &#123; <span class="attr">changing</span> = <span class="literal">true</span> &#125;</div></pre></td></tr></table></figure>
<p>其中，<strong>tinker-android-anno</strong>用于注解生成application类<br><strong>tinker-android-lib</strong>为tinker的核心库</p>
<ol>
<li>在app的gradle文件<strong>app/build.gradle</strong>配置<strong>tinkerPatch task</strong>，下面给出简单的示例：<br>//全局信息相关的配置项</li>
</ol>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">tinkerPatch &#123;</div><div class="line">    <span class="comment">//有问题的apk的地址  准apk包的路径，必须输入，否则会报错</span></div><div class="line">    oldApk = <span class="string">"/Users/littlebyte/AndroidStudioProjects/TInkerTest/app/oldApk/app-debug.apk"</span></div><div class="line">    <span class="comment">//</span></div><div class="line">    ignoreWarning = <span class="literal">false</span></div><div class="line">    <span class="comment">//在运行过程中，需要验证基准apk包与补丁包的签名是否一致，我们是否需要为你签名</span></div><div class="line">    useSign = <span class="literal">true</span></div><div class="line">    <span class="comment">//编译相关的配置项</span></div><div class="line">    buildConfig &#123;</div><div class="line">        <span class="comment">//在运行过程中，我们需要验证基准apk包的tinkerId是否等于补丁包的tinkerId。</span></div><div class="line">        <span class="comment">// 这个是决定补丁包能运行在哪些基准包上面，一般来说我们可以使用git版本号、versionName等等。</span></div><div class="line">        tinkerId = <span class="string">"1.0"</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">//用于生成补丁包中的'package_meta.txt'文件</span></div><div class="line">    packageConfig &#123;</div><div class="line">        <span class="comment">//onfigField("key", "value"), 默认我们自动从基准安装包与新安装包的Manifest中读取tinkerId,并自动写入configField。</span></div><div class="line">        <span class="comment">// 在这里，你可以定义其他的信息，在运行时可以通过TinkerLoadResult.getPackageConfigByName得到相应的数值。</span></div><div class="line">        <span class="comment">// 但是建议直接通过修改代码来实现，例如BuildConfig。</span></div><div class="line"><span class="comment">//        configField("TINKER_ID", "1.0")</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">//dex相关的配置项</span></div><div class="line">    dex &#123;</div><div class="line">        <span class="comment">//只能是'raw'或者'jar'。</span></div><div class="line">        <span class="comment">//对于'raw'模式，我们将会保持输入dex的格式。</span></div><div class="line">        <span class="comment">//对于'jar'模式，我们将会把输入dex重新压缩封装到jar。</span></div><div class="line">        <span class="comment">// 如果你的minSdkVersion小于14，你必须选择‘jar’模式，而且它更省存储空间，但是验证md5时比'raw'模式耗时()</span></div><div class="line">        dexMode = <span class="string">"jar"</span></div><div class="line">        <span class="comment">//需要处理dex路径，支持*、?通配符，必须使用'/'分割。路径是相对安装包的，例如/assets/...</span></div><div class="line">        pattern = [<span class="string">"classes*.dex"</span>, <span class="string">"assets/secondary-dex-?.jar"</span>]</div><div class="line">        <span class="comment">//它定义了哪些类在加载补丁包的时候会用到。这些类是通过Tinker无法修改的类，也是一定要放在main dex的类。</span></div><div class="line">        loader = [<span class="string">"com.tencent.tinker.loader.*"</span>, <span class="string">"com.cn21.tinkertest.MyApplication"</span>]</div><div class="line">        <span class="comment">/**</span></div><div class="line">         * 这里需要定义的类有：</div><div class="line">         1. 你自己定义的Application类；</div><div class="line">         2. Tinker库中用于加载补丁包的部分类，即com.tencent.tinker.loader.*；</div><div class="line">         3. 如果你自定义了TinkerLoader，需要将它以及它引用的所有类也加入loader中；</div><div class="line">         4. 其他一些你不希望被更改的类，例如Sample中的BaseBuildInfo类。这里需要注意的是，</div><div class="line">         这些类的直接引用类也需要加入到loader中。或者你需要将这个类变成非preverify。</div><div class="line">         */</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//lib相关的配置项</span></div><div class="line">    lib &#123;</div><div class="line">        <span class="comment">//需要处理lib路径，支持*、?通配符，必须使用'/'分割。与dex.pattern一致, 路径是相对安装包的，例如/assets/...</span></div><div class="line">        pattern = [<span class="string">"lib/armeabi/*.so"</span>, <span class="string">"lib/arm64-v8a/*.so"</span>, <span class="string">"lib/armeabi-v7a/*.so"</span>, <span class="string">"lib/mips/*.so"</span>, <span class="string">"lib/mips64/*.so"</span>, <span class="string">"lib/x86/*.so"</span>, <span class="string">"lib/x86_64/*.so"</span>]</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//res相关的配置项</span></div><div class="line">    res &#123;</div><div class="line">        pattern = [<span class="string">"res/*"</span>, <span class="string">"assets/*"</span>, <span class="string">"resources.arsc"</span>, <span class="string">"AndroidManifest.xml"</span>]</div><div class="line">        <span class="comment">//对于修改的资源，如果大于largeModSize，我们将使用bsdiff算法。</span></div><div class="line">        <span class="comment">// 这可以降低补丁包的大小，但是会增加合成时的复杂度。默认大小为100kb</span></div><div class="line">        largeModSize = <span class="number">100</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">//7zip路径配置项，执行前提是useSign为true</span></div><div class="line">    sevenZip &#123;</div><div class="line">        <span class="comment">//例如"com.tencent.mm:SevenZip:1.1.10"，将自动根据机器属性获得对应的7za运行文件，推荐使用。</span></div><div class="line">        zipArtifact = <span class="string">"com.tencent.mm:SevenZip:1.1.10"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面只是使用了部分tinker参数，全部参数及含义可参考<a href="https://github.com/Tencent/tinker/wiki/Tinker-%E6%8E%A5%E5%85%A5%E6%8C%87%E5%8D%97" target="_blank" rel="external">tinkerPatch gradle参数官方wiki</a></p>
<h3 id="2-修改Application类"><a href="#2-修改Application类" class="headerlink" title="2. 修改Application类"></a>2. 修改Application类</h3><ol>
<li>修改工程的Application类，使其继承自<strong>DefaultApplicationLike</strong>，然后生成默认的构造方法，并覆盖<strong>onBaseContextAttached</strong>方法，然后添加一个<strong>registerActivityLifecycleCallbacks</strong>方法，同时在自己的Application类上加上以下注解：</li>
</ol>
<figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">@DefaultLifeCycle(<span class="attr">application</span> = <span class="string">"com.cn21.tinkertest.MyApplication"</span>,</div><div class="line">       <span class="attr">flags</span> = ShareConstants.TINKER_ENABLE_ALL,</div><div class="line">       <span class="attr">loadVerifyFlag</span> = <span class="literal">false</span>)</div></pre></td></tr></table></figure>
<p>其中，</p>
<ul>
<li><strong>application</strong>属性指定的是tinker为我们生成的真正的Application，一般是<strong>包名＋自定义的Application名称</strong>作为名字，其中application属性指定的是tinker为我们生成的真正的Application类，需要注意两点，一是AndroidManifest.xml 中的application节点下的name 属性必须是这个application属性的值。As找不到这个Application报错但不会影响编译成功；二是在<strong>app/build.gradle</strong>文件中的tinkerPatch-dex-loader节点中添加application属性的值（见tinkerPatch gradle配置）。</li>
<li><strong>flags</strong>属性指定tinker可以修复的范围，<em>TINKER_ENABLE_ALL</em>是全部都可以修复，还有<em>TINKER_DEX_AND_LIBRARY</em>，<em>TINKER_RESOURCE_MASK</em>，<em>TINKER_DEX_MASK</em>等等，根据名字就可以知道所代表的含义。</li>
</ul>
<p>以下是完整的自定义Application代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@DefaultLifeCycle</span>(application = <span class="string">"com.cn21.tinkertest.MyApplication"</span>,</div><div class="line">        flags = ShareConstants.TINKER_ENABLE_ALL,</div><div class="line">        loadVerifyFlag = <span class="keyword">false</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TinkerTestApplicarion</span> <span class="keyword">extends</span> <span class="title">DefaultApplicationLike</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TinkerTestApplicarion</span><span class="params">(Application application, <span class="keyword">int</span> tinkerFlags, <span class="keyword">boolean</span> tinkerLoadVerifyFlag, <span class="keyword">long</span> applicationStartElapsedTime, <span class="keyword">long</span> applicationStartMillisTime, Intent tinkerResultIntent)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(application, tinkerFlags, tinkerLoadVerifyFlag, applicationStartElapsedTime, applicationStartMillisTime, tinkerResultIntent);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     *  install tinker</div><div class="line">     * <span class="doctag">@param</span> base</div><div class="line">     */</div><div class="line">    <span class="meta">@TargetApi</span>(Build.VERSION_CODES.ICE_CREAM_SANDWICH)</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBaseContextAttached</span><span class="params">(Context base)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onBaseContextAttached(base);</div><div class="line">        TinkerInstaller.install(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@TargetApi</span>(Build.VERSION_CODES.ICE_CREAM_SANDWICH)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerActivityLifecycleCallbacks</span><span class="params">(Application.ActivityLifecycleCallbacks callback)</span> </span>&#123;</div><div class="line">        getApplication().registerActivityLifecycleCallbacks(callback);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-使用tinker生成补丁"><a href="#3-使用tinker生成补丁" class="headerlink" title="3. 使用tinker生成补丁"></a>3. 使用tinker生成补丁</h3><p>到此，配置已经基本完成了。下面开始使用。</p>
<ol>
<li>首先编译运行一次工程，将生成的apk保存备份在除了build/output/apk以外的文件夹，tinker会读取这个旧的apk与新的apk进行比较生成补丁，同时需要修改<strong>app/build.gradle</strong>文件中oldApk的路径。</li>
<li>修改工程中代码或者资源，然后打开As gradle任务栏，找到<strong>tinker任务</strong>那一项，选择对应的tinker任务运行</li>
</ol>
<p><img src="http://om2bpqram.bkt.clouddn.com/1488428191026.jpg" alt="enter description here"></p>
<p>然后在build/outputs/tinkerPatch目录下会生成补丁包与相关日志。将补丁包<strong>patch_signed_7zip.apk</strong>push到手机的sdcard目录，此时就可以在工程需要的地方调用tinker 的补丁加载方法了</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">TinkerInstaller.onReceiveUpgradePatch(getApplicationContext(), Environment.getExternalStorageDirectory().getAbsolutePath() + <span class="string">"/patch_signed_7zip.apk"</span>);</div></pre></td></tr></table></figure>
<p>因为需要读取sdcard中的文件，因此读写权限必须要配置。<br>如果补丁加载成功，可以在logcat中看到以下信息</p>
<p><img src="http://om2bpqram.bkt.clouddn.com/1488428245626.jpg" alt="enter description here"><br>需要注意的是，tinker默认补丁成功后会杀死应用，因此如果有需要则自定义ResultService继承自<strong>DefaultTinkerResultService</strong>，修改补丁成功后的行为</p>
<ol>
<li>重启应用则可以看到打补丁后的效果。</li>
</ol>
<p>更详尽的tinker知识请参考tinker <a href="https://github.com/Tencent/tinker" target="_blank" rel="external">Github主页</a>，包括tinker源码与使用示例都可以看到</p>
<h2 id="Tinker接入其他问题"><a href="#Tinker接入其他问题" class="headerlink" title="Tinker接入其他问题"></a>Tinker接入其他问题</h2><h3 id="1-开启multidex支持"><a href="#1-开启multidex支持" class="headerlink" title="1. 开启multidex支持"></a>1. 开启multidex支持</h3><p>如果项目需要用到multidex则需要在gradle中添加multidex依赖，</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> <span class="string">"com.android.support:multidex:1.0.1"</span></div></pre></td></tr></table></figure>
<p>在android-defaultConfig节点中添加</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">multiDexEnabled</span> <span class="literal">true</span></div></pre></td></tr></table></figure>
<p>在Application初始化tinker之前加入</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">MultiDex.<span class="keyword">install</span>(base);</div></pre></td></tr></table></figure>
<h3 id="2-多渠道打包"><a href="#2-多渠道打包" class="headerlink" title="2. 多渠道打包"></a>2. 多渠道打包</h3><p>tinker默认是每个渠道生成一个对应的补丁包，这样子会造成空间浪费和发布的时候容易出错。因此官方推荐使用<a href="https://github.com/mcxiaoke/packer-ng-plugin" target="_blank" rel="external">packer-ng-plugin</a>工具进行多渠道打包。</p>
<h3 id="3-资源混淆"><a href="#3-资源混淆" class="headerlink" title="3. 资源混淆"></a>3. 资源混淆</h3><p>如果应用使用了<a href="https://github.com/shwenzhang/AndResGuard" target="_blank" rel="external">AndResGuard</a>混淆资源文件，编译流程需要做特殊处理，具体请参考<a href="http://www.cnblogs.com/yyangblog/p/6268818.html" target="_blank" rel="external">这篇文章</a></p>
<h3 id="4-应用加固"><a href="#4-应用加固" class="headerlink" title="4. 应用加固"></a>4. 应用加固</h3><p>tinker1.7.6之后不再支持加固</p>
<h3 id="5-tinker与instant-run的兼容问题"><a href="#5-tinker与instant-run的兼容问题" class="headerlink" title="5.tinker与instant run的兼容问题"></a>5.tinker与instant run的兼容问题</h3><p>事实上，若编译时都使用assemble*, tinker与instant run是可以兼容的。但是不少用户基础包与补丁包混用两种模式导致补丁过大，所以tinker编译时禁用instant run，我们可以在设置中禁用instant run或使用assemble方式编译。</p>
<p>大家日常debug时若想开启instant run功能，可以将tinker暂时关闭：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ext &#123;</div><div class="line">    <span class="comment">//for some reason, you may want to ignore tinkerBuild, such as instant run debug build?</span></div><div class="line">    tinkerEnabled = <span class="literal">false</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>更多常见问题请参见<a href="https://github.com/Tencent/tinker/wiki/Tinker-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98" target="_blank" rel="external">官方wiki</a></p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Tinker </tag>
            
            <tag> 热修复 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[openresty-rsa加解密库]]></title>
      <url>http://little-byte.com/2016/08/20/openresty-rsa%E5%8A%A0%E8%A7%A3%E5%AF%86%E5%BA%93/</url>
      <content type="html"><![CDATA[<p>因为lua相关的RSA加解密库比较少，而C和C++相关的RSA加解密库却比较多，因此萌生了通过LuaJit的FFI  拓展库来调用C或C++实现来封装成Lua 的RSA库。经过谷歌终于找到了一个很符合要求的实现方法：<br><a href="http://hayageek.com/rsa-encryption-decryption-openssl-c/" target="_blank" rel="external">http://hayageek.com/rsa-encryption-decryption-openssl-c/</a></p>
<p>下面就来说说整个开发详细流程<br><a id="more"></a></p>
<h2 id="安装OpenSSL"><a href="#安装OpenSSL" class="headerlink" title="安装OpenSSL"></a>安装OpenSSL</h2><p>RSA加密和解密的公钥私钥由OpenSSL生成。在Ubuntu下，安装OpenSSL通过以下两条命令可以完成：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install openssl</div><div class="line">sudo apt-get install libssl-dev</div></pre></td></tr></table></figure></p>
<h2 id="生成公钥和私钥"><a href="#生成公钥和私钥" class="headerlink" title="生成公钥和私钥"></a>生成公钥和私钥</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">-- 生成 RSA 私钥（传统格式的,PKCS<span class="comment">#1标准）</span></div><div class="line">openssl genrsa -out rsa_private_key.pem 1024</div><div class="line">-- 将传统格式的私钥转换成 PKCS<span class="comment">#8 格式的（JAVA需要使用的私钥需要经过PKCS#8编码,而本次在项目作为接口使用Lua编写，如不需要这一步其实可以略过）</span></div><div class="line">openssl pkcs8 -topk8 -inform PEM -<span class="keyword">in</span> rsa_private_key.pem -outform PEM -nocrypt</div><div class="line">-- 生成 RSA 公钥</div><div class="line">openssl rsa -<span class="keyword">in</span> rsa_private_key.pem -pubout -out rsa_public_key.pem</div></pre></td></tr></table></figure>
<h2 id="编译动态链接库"><a href="#编译动态链接库" class="headerlink" title="编译动态链接库"></a>编译动态链接库</h2><p>参考上面给的链接，要封装的RSA加解密C语言实现版如下：<br>rsa.c文件<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;openssl/pem.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;openssl/ssl.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;openssl/rsa.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;openssl/evp.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;openssl/bio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;openssl/err.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"> </div><div class="line"><span class="keyword">int</span> padding = RSA_PKCS1_PADDING;</div><div class="line"> </div><div class="line"><span class="function">RSA * <span class="title">createRSA</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> * key,<span class="keyword">int</span> <span class="keyword">public</span>)</span></span></div><div class="line">&#123;</div><div class="line">    RSA *rsa= <span class="literal">NULL</span>;</div><div class="line">    BIO *keybio ;</div><div class="line">    keybio = BIO_new_mem_buf(key, <span class="number">-1</span>);</div><div class="line">    <span class="keyword">if</span> (keybio==<span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>( <span class="string">"Failed to create key BIO"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(<span class="keyword">public</span>)</div><div class="line">    &#123;</div><div class="line">        rsa = PEM_read_bio_RSA_PUBKEY(keybio, &amp;rsa,<span class="literal">NULL</span>, <span class="literal">NULL</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        rsa = PEM_read_bio_RSAPrivateKey(keybio, &amp;rsa,<span class="literal">NULL</span>, <span class="literal">NULL</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(rsa == <span class="literal">NULL</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>( <span class="string">"Failed to create RSA"</span>);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="keyword">return</span> rsa;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">public_encrypt</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> * data,<span class="keyword">int</span> data_len,<span class="keyword">unsigned</span> <span class="keyword">char</span> * key, <span class="keyword">unsigned</span> <span class="keyword">char</span> *encrypted)</span></span></div><div class="line">&#123;</div><div class="line">    RSA * rsa = createRSA(key,<span class="number">1</span>);</div><div class="line">    <span class="keyword">int</span> result = RSA_public_encrypt(data_len,data,encrypted,rsa,padding);</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">private_decrypt</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> * enc_data,<span class="keyword">int</span> data_len,<span class="keyword">unsigned</span> <span class="keyword">char</span> * key, <span class="keyword">unsigned</span> <span class="keyword">char</span> *decrypted)</span></span></div><div class="line">&#123;</div><div class="line">    RSA * rsa = createRSA(key,<span class="number">0</span>);</div><div class="line">    <span class="keyword">int</span>  result = RSA_private_decrypt(data_len,enc_data,decrypted,rsa,padding);</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">private_encrypt</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> * data,<span class="keyword">int</span> data_len,<span class="keyword">unsigned</span> <span class="keyword">char</span> * key, <span class="keyword">unsigned</span> <span class="keyword">char</span> *encrypted)</span></span></div><div class="line">&#123;</div><div class="line">    RSA * rsa = createRSA(key,<span class="number">0</span>);</div><div class="line">    <span class="keyword">int</span> result = RSA_private_encrypt(data_len,data,encrypted,rsa,padding);</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">public_decrypt</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> * enc_data,<span class="keyword">int</span> data_len,<span class="keyword">unsigned</span> <span class="keyword">char</span> * key, <span class="keyword">unsigned</span> <span class="keyword">char</span> *decrypted)</span></span></div><div class="line">&#123;</div><div class="line">    RSA * rsa = createRSA(key,<span class="number">1</span>);</div><div class="line">    <span class="keyword">int</span>  result = RSA_public_decrypt(data_len,enc_data,decrypted,rsa,padding);</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">printLastError</span><span class="params">(<span class="keyword">char</span> *msg)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">char</span> * err = <span class="built_in">malloc</span>(<span class="number">130</span>);;</div><div class="line">    ERR_load_crypto_strings();</div><div class="line">    ERR_error_string(ERR_get_error(), err);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s ERROR: %s\n"</span>,msg, err);</div><div class="line">    <span class="built_in">free</span>(err);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在ubuntu下通过以下命令来生成.so库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># gcc rsa.c -fPIC -shared -o librsa.so</span></div></pre></td></tr></table></figure></p>
<h2 id="使用rsa-so库"><a href="#使用rsa-so库" class="headerlink" title="使用rsa.so库"></a>使用rsa.so库</h2><p>生成的动态链接库放到<strong>usr/lib</strong>目录下就能使用了，以下使用rsa.so封装了一个lua版的rsa加解密库<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line">module(<span class="string">"rsa"</span>, <span class="built_in">package</span>.<span class="built_in">seeall</span>)</div><div class="line"><span class="keyword">local</span> ffi = <span class="built_in">require</span>(<span class="string">'ffi'</span>)</div><div class="line"> </div><div class="line"><span class="keyword">local</span> rsa = ffi.<span class="built_in">load</span>(<span class="string">'rsa'</span>)</div><div class="line"> </div><div class="line">ffi.cdef <span class="string">[[</span></div><div class="line">int public_encrypt(unsigned char * data,int data_len,unsigned char * key, unsigned char *encrypted);</div><div class="line">int private_decrypt(unsigned char * enc_data,int data_len,unsigned char * key, unsigned char *decrypted);</div><div class="line"> </div><div class="line">int private_encrypt(unsigned char * data,int data_len,unsigned char * key, unsigned char *encrypted);</div><div class="line">int public_decrypt(unsigned char * enc_data,int data_len,unsigned char * key, unsigned char *decrypted);</div><div class="line">]]</div><div class="line"> </div><div class="line"><span class="keyword">local</span> _M = &#123; <span class="built_in">_VERSION</span> = <span class="string">'1.0'</span> &#125;</div><div class="line"> </div><div class="line"><span class="comment">--公钥加密</span></div><div class="line"><span class="function"><span class="keyword">function</span> _M.public_encrypt<span class="params">(msg, publicKey)</span></span></div><div class="line">    <span class="keyword">local</span> c_str = ffi.new(<span class="string">"char[?]"</span>, <span class="number">1024</span> / <span class="number">8</span>)</div><div class="line">    ffi.copy(c_str, msg)</div><div class="line">    <span class="keyword">local</span> pub = ffi.new(<span class="string">"char[?]"</span>, #publicKey)</div><div class="line">    ffi.copy(pub, publicKey)</div><div class="line">    <span class="comment">--存放加密结果</span></div><div class="line">    <span class="keyword">local</span> encrypt = ffi.new(<span class="string">"char[?]"</span>, <span class="number">2048</span>)</div><div class="line">    <span class="keyword">local</span> ret = rsa.public_encrypt(c_str, #msg, pub, encrypt)</div><div class="line">    <span class="keyword">if</span> ret == <span class="number">-1</span> <span class="keyword">then</span></div><div class="line">        <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">    <span class="keyword">return</span> ffi.<span class="built_in">string</span>(encrypt,ret)</div><div class="line"><span class="keyword">end</span></div><div class="line"> </div><div class="line"><span class="comment">--私钥解密</span></div><div class="line"><span class="function"><span class="keyword">function</span> _M.private_decrypt<span class="params">(msg, privateKey)</span></span></div><div class="line">    <span class="keyword">local</span> c_str = ffi.new(<span class="string">"char[?]"</span>, <span class="number">1024</span> / <span class="number">8</span>)</div><div class="line">    ffi.copy(c_str, msg)</div><div class="line">    <span class="keyword">local</span> pri = ffi.new(<span class="string">"char[?]"</span>, #privateKey)</div><div class="line">    ffi.copy(pri, privateKey)</div><div class="line">    <span class="comment">--存放解密结果</span></div><div class="line">    <span class="keyword">local</span> decrypt = ffi.new(<span class="string">"char[?]"</span>, <span class="number">2048</span>)</div><div class="line">    <span class="keyword">local</span> ret = rsa.private_decrypt(c_str, #msg, pri, decrypt)</div><div class="line">    <span class="keyword">if</span> ret == <span class="number">-1</span> <span class="keyword">then</span></div><div class="line">        <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">    <span class="keyword">return</span> ffi.<span class="built_in">string</span>(decrypt,ret)</div><div class="line"><span class="keyword">end</span></div><div class="line"> </div><div class="line"><span class="comment">--私钥加密</span></div><div class="line"><span class="function"><span class="keyword">function</span> _M.private_encrypt<span class="params">(msg, privateKey)</span></span></div><div class="line">    <span class="keyword">local</span> c_str = ffi.new(<span class="string">"char[?]"</span>, <span class="number">1024</span> / <span class="number">8</span>)</div><div class="line">    ffi.copy(c_str, msg)</div><div class="line">    <span class="keyword">local</span> pri = ffi.new(<span class="string">"char[?]"</span>, #privateKey)</div><div class="line">    ffi.copy(pri, privateKey)</div><div class="line">    <span class="comment">--存放加密结果</span></div><div class="line">    <span class="keyword">local</span> encrypt = ffi.new(<span class="string">"char[?]"</span>, <span class="number">2048</span>)</div><div class="line">    <span class="keyword">local</span> ret = rsa.private_encrypt(c_str, #msg, pri, encrypt)</div><div class="line">    <span class="keyword">if</span> ret == <span class="number">-1</span> <span class="keyword">then</span></div><div class="line">        <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">    <span class="keyword">return</span> ffi.<span class="built_in">string</span>(encrypt,ret)</div><div class="line"><span class="keyword">end</span></div><div class="line"> </div><div class="line"><span class="comment">--公钥解密</span></div><div class="line"><span class="function"><span class="keyword">function</span> _M.public_decrypt<span class="params">(msg, publicKey)</span></span></div><div class="line">    <span class="keyword">local</span> c_str = ffi.new(<span class="string">"char[?]"</span>, <span class="number">1024</span> / <span class="number">8</span>)</div><div class="line">    ffi.copy(c_str, msg)</div><div class="line">    <span class="keyword">local</span> pub = ffi.new(<span class="string">"char[?]"</span>, #publicKey)</div><div class="line">    ffi.copy(pub, publicKey)</div><div class="line">    <span class="comment">--存放解密结果</span></div><div class="line">    <span class="keyword">local</span> decrypt = ffi.new(<span class="string">"char[?]"</span>, <span class="number">2048</span>)</div><div class="line">    <span class="keyword">local</span> ret = rsa.public_decrypt(c_str, #msg, pub, decrypt)</div><div class="line">    <span class="keyword">if</span> ret == <span class="number">-1</span> <span class="keyword">then</span></div><div class="line">        <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">    <span class="keyword">return</span> ffi.<span class="built_in">string</span>(decrypt,ret)</div><div class="line"><span class="keyword">end</span></div><div class="line"> </div><div class="line"><span class="keyword">return</span> _M</div></pre></td></tr></table></figure></p>
<p>就这样，本人的openresty rsa加解密第三方库就制作完成了，支持公钥加密私钥解密，也支持私钥加密公钥解密。下面贴出本人的测试代码：<br><figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">local</span> rsa = <span class="built_in">require</span> <span class="string">"resty.rsa"</span></div><div class="line"><span class="keyword">local</span> RSA_PUBLIC_KEY = <span class="string">[[-----BEGIN PUBLIC KEY-----</span></div><div class="line">MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC3bTBJNQJjY6u7Y5b2eOWws0yW</div><div class="line">CGuWPm6MGOSVan65wCrJa5p3q3sodQUDVPotjsknjLlje9E1F7Bx94ZuqTwkvAr6</div><div class="line">ieLkgbbeqTCzeJ0AryUXiF3auxFSPdpBoD6nxtEeN8bZwfa/IYzdKyKlbhiQbUMN</div><div class="line">qWgmxiPVwupwAML7RQIDAQAB</div><div class="line">-----END PUBLIC KEY-----]]</div><div class="line"><span class="keyword">local</span> RSA_PRIV_KEY = <span class="string">[[-----BEGIN RSA PRIVATE KEY-----</span></div><div class="line">MIICXAIBAAKBgQC3bTBJNQJjY6u7Y5b2eOWws0yWCGuWPm6MGOSVan65wCrJa5p3</div><div class="line">q3sodQUDVPotjsknjLlje9E1F7Bx94ZuqTwkvAr6ieLkgbbeqTCzeJ0AryUXiF3a</div><div class="line">uxFSPdpBoD6nxtEeN8bZwfa/IYzdKyKlbhiQbUMNqWgmxiPVwupwAML7RQIDAQAB</div><div class="line">AoGAc4NXvUKc1mqWY9Q75cwNGlJQEMwMtPlsNN4YVeBTHjdeuqoBBQwA62GGXqrN</div><div class="line">QpOBKl79ASGghob8n0j6aAY70PQqHSU4c06c7UlkeEvxJKlyUTO2UgnjjIHb2flR</div><div class="line">uW8y3xmjpXAfwe50eAVMNhCon7DBc+XMF/paSVwiG8V+GAECQQDvosVLImUkIXGf</div><div class="line">I2AJ2iSOUF8W1UZ5Ru68E8hJoVkNehk14RUFzTkwhoPHYDseZyEhSunFQbXCotlL</div><div class="line">Ar5+O+lBAkEAw/PJXvi3S557ihDjYjKnj/2XtIa1GwBJxOliVM4eVjfRX15OXPR2</div><div class="line">6shID4ZNWfkWN3fjVm4CnUS41+bzHNctBQJAGCeiF3a6FzA/0bixH40bjjTPwO9y</div><div class="line">kRrzSYX89F8NKOybyfCMO+95ykhk1B4BF4lxr3drpPSAq8Paf1MhfHvxgQJBAJUB</div><div class="line">0WNy5o+OWItJBGAr/Ne2E6KnvRhnQ7GFd8zdYJxXndNTt2tgSv2Gh6WmjzOYApjz</div><div class="line">heC3jy1gkN89NCn+RrECQBTvoqFHfyAlwOGC9ulcAcQDqj/EgCRVkVe1IsQZenAe</div><div class="line">rKCWlUaeIKeVkRz/wzb1zy9AVsPC7Zbnf4nrOxJ23mI=</div><div class="line">-----END RSA PRIVATE KEY-----]]</div><div class="line"> </div><div class="line">ngx.say(<span class="string">'-----公钥加密私钥解密 start------'</span>)</div><div class="line"><span class="keyword">local</span> str=<span class="string">'i love lwl'</span></div><div class="line"> </div><div class="line"><span class="keyword">local</span> encryptPubStr = rsa.public_encrypt(str, RSA_PUBLIC_KEY)</div><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> encryptPubStr <span class="keyword">then</span></div><div class="line">ngx.say(<span class="string">'pub encrypt failed'</span>)</div><div class="line"><span class="keyword">end</span></div><div class="line"><span class="keyword">local</span> decryptPriStr=rsa.private_decrypt(encryptPubStr,RSA_PRIV_KEY)</div><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> decryptPriStr <span class="keyword">then</span></div><div class="line">ngx.say(<span class="string">'pri decrypt failed'</span>)</div><div class="line"><span class="keyword">end</span></div><div class="line">ngx.say(<span class="string">'公钥加密私钥解密成功\n'</span>..decryptPriStr)</div><div class="line">ngx.say(<span class="string">'-----公钥加密私钥解密 end------'</span>)</div><div class="line"> </div><div class="line">ngx.say(<span class="string">'================================'</span>)</div><div class="line"> </div><div class="line">ngx.say(<span class="string">'-----私钥加密公钥解密 start------'</span>)</div><div class="line"><span class="keyword">local</span> str=<span class="string">'i like lwl'</span></div><div class="line"> </div><div class="line"><span class="keyword">local</span> encryptPriStr = rsa.private_encrypt(str, RSA_PRIV_KEY)</div><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> encryptPriStr <span class="keyword">then</span></div><div class="line">ngx.say(<span class="string">'pri encrypt failed'</span>)</div><div class="line"><span class="keyword">end</span></div><div class="line"><span class="keyword">local</span> decryptPubStr=rsa.public_decrypt(encryptPriStr,RSA_PUBLIC_KEY)</div><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> decryptPubStr <span class="keyword">then</span></div><div class="line">ngx.say(<span class="string">'pub decrypt failed'</span>)</div><div class="line"><span class="keyword">end</span></div><div class="line">ngx.say(<span class="string">'公钥加密私钥解密成功\n'</span>..decryptPubStr)</div><div class="line">ngx.say(<span class="string">'-----私钥加密公钥解密 end------'</span>)</div></pre></td></tr></table></figure></p>
<p>项目已托管到Github，欢迎star或fork，也欢迎提出改进意见。<br>传送门：<a href="https://github.com/LittleLiByte/lua-rsa" target="_blank" rel="external">lua-rsa</a></p>
]]></content>
      
        <categories>
            
            <category> OpenResty </category>
            
        </categories>
        
        
        <tags>
            
            <tag> RSA </tag>
            
            <tag> Nginx </tag>
            
            <tag> Lua </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Github+Hexo搭建博客全记录]]></title>
      <url>http://little-byte.com/2016/08/10/Github-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%85%A8%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<h2 id="1-Github-配置"><a href="#1-Github-配置" class="headerlink" title="1. Github 配置"></a>1. Github 配置</h2><h3 id="Github-账号注册"><a href="#Github-账号注册" class="headerlink" title="Github 账号注册"></a>Github 账号注册</h3><p>*要在Github 上面搭建博客当然需要有个账号了，没有的赶紧注册一个，现在的程序员没有一个Github还怎么愉快装逼（误）。<br><a href="https://github.com/" target="_blank" rel="external">传送门</a>。怎么注册就不用细说了吧。</p>
<h3 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h3><p>新建一个仓库，用来放博客相关的配置和文章。名字可以随意，反正以后也能改。博客仓库一般都会起这个名字：<br><strong>github账号名字.github.io</strong>。<br>其他配置也随意，按个人喜好填写，如果实在懒直接下一步。╭(╯^╰)╮<br><a id="more"></a></p>
<h3 id="仓库配置"><a href="#仓库配置" class="headerlink" title="仓库配置"></a>仓库配置</h3><ul>
<li>进入仓库，仓库标题下方有7个导航，点击最右侧的<strong>Setting</strong>进入仓库属性设置</li>
<li>然后点击GitHub Pages 项下的<strong>Launch automatic page generator</strong>按钮</li>
<li>接着如果在新建仓库的时候又生成README.md文件可以选择<strong>Load README.md</strong></li>
<li>没有README.md文件则直接点击<strong>Continue to layouts</strong>进入主题选择，随便选一个就好，反正接下来会用更好的Hexo主题</li>
<li>再接着点击<strong>Publish page</strong>搞定</li>
</ul>
<p>这时候可以在setting页面找到刚刚创建的静态站点的访问地址<strong>Your site is published at xxx</strong>，如果仓库名字是<strong>github账号名字.github.io</strong>，那么访问 <strong><a href="http://github账号名字.github.io" target="_blank" rel="external">http://github账号名字.github.io</a></strong> 就可以看到自己创建好的站点了。</p>
<h2 id="2-域名绑定"><a href="#2-域名绑定" class="headerlink" title="2.域名绑定"></a>2.域名绑定</h2><p>实际上无需购买域名也可以搭建博客，因此如果不打算购买域名可以跳过此步。不过我觉得使用自己的个性域名会更加酷…</p>
<h3 id="域名购买"><a href="#域名购买" class="headerlink" title="域名购买"></a>域名购买</h3><p>我的域名在<a href="https://wanwang.aliyun.com/" target="_blank" rel="external">万网</a>买的，当然你可以选择<a href="https://www.dnspod.cn/" target="_blank" rel="external">dnspod</a>。不过个人感觉在万网购买会便宜点。根据个人喜好和经济情况选择域名和购买年限。</p>
<ul>
<li>在<strong>万网</strong>购买域名后，登录到控制台，进入域名选项页面，给你所购买的域名添加解析，因为博客使用的是Github提供的github pages，因此将<strong>github账号名字.github.io</strong>这个网站的IP地址设置为解析IP，可以使用Ping命令查看github账号名字.github.io的IP地址。</li>
<li>设置完成后，还需要在你新建的博客仓库下设置<strong>Custom domain</strong>，即把你的Github Pages和你购买的域名绑定，这样访问你所购买的域名就会重定向到博客所在的Github Pages。<br>如果还有疑问可以参考阿里云的云解析<a href="https://help.aliyun.com/knowledge_detail/29716.html?spm=5176.product29697.3.1.n5T5E9" target="_blank" rel="external">解析设置入门指南</a>。</li>
</ul>
<h2 id="3-使用Hexo博客框架"><a href="#3-使用Hexo博客框架" class="headerlink" title="3.使用Hexo博客框架"></a>3.使用Hexo博客框架</h2><blockquote>
<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
</blockquote>
<ul>
<li>Hexo相比于原生的Github Pages，无论是写作和部署的便捷性上还是主题美观程度上都好太多，所以使用Hexo博客框架是现在的潮流。<br>要使用Hexo，首先需要安装好<a href="https://git-scm.com/download/win" target="_blank" rel="external">Git</a>和<a href="http://nodejs.cn/" target="_blank" rel="external">NodeJs</a>,都是exe安装包，如果没有什么特殊需求一路默认设置下一步就可以了。</li>
<li>打开命令行窗口，输入<strong>npm install -g hexo-cli</strong>，耐心等待下载完成，即可安装好Hexo。</li>
<li>在你喜欢的目录下，按住Shift+鼠标右键，选择<strong>在此处打开命令行窗口</strong>，然后输入命令<strong>hexo init xxx</strong>,其中xxx名字可以随便起。耐心等待hexo初始化和依赖组件下载完成，等到命令行窗口输出<strong>INFO  Start blogging with Hexo!</strong>，初始化才是真正完成。</li>
</ul>
<p><img src="http://om2bpqram.bkt.clouddn.com/1488416894394.jpg" alt="enter description here"></p>
<ul>
<li>一般来说，只需关注<strong>网站配置文件_config.yml</strong>，<strong>博客文章存放目录source/_posts</strong>，<strong>网站主题目录theme</strong>。</li>
</ul>
<h3 id="网站配置文件-config-yml"><a href="#网站配置文件-config-yml" class="headerlink" title="网站配置文件_config.yml"></a>网站配置文件_config.yml</h3><p>具体config.yml配置请参考<a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="external">Hexo官方说明文档</a>.这里我只说我修改的地方。</p>
<ul>
<li><strong>title</strong> 博客和网页标签显示的标题，按个人喜好随意</li>
<li><strong>subtitle</strong> 博客副标题标题，一般写简介或者自己喜欢的话</li>
<li><strong>author</strong> 作者名字，随便起</li>
<li><strong>language</strong> 作者名字，随便起</li>
<li><strong>language</strong>除非你英文特牛逼，否则一般都会改成zh-CN</li>
<li><strong>url</strong> 设置为你购买的域名，如果没有购买域名可以设置为gtihub博客仓库地址</li>
<li><strong>deploy</strong>  需要进行如下设置：<br>　　type: git<br>　　repo:博客仓库的git地址，比如我的是<a href="https://github.com/LittleLiByte/littlelibyte.github.io.git。" target="_blank" rel="external">https://github.com/LittleLiByte/littlelibyte.github.io.git。</a><br>其他配置属性留到主题设置时再细说。</li>
</ul>
<h3 id="添加博文"><a href="#添加博文" class="headerlink" title="添加博文"></a>添加博文</h3><ul>
<li><p>使用命令 <strong>hexo new xxx</strong>   可以新建一篇博文,其中xxx是博文标题。新建完成后，可以在/source/_post目录下找到新建的文章，<strong>.md</strong>格式的文件，后缀名不言而喻，博文使用markdown语法来写。<br>看到这里不知道markdown的小白也许一惊–写个博客还要去学一种新语法?然而markdown语法真的很简单很简单，掌握基础够用的语法只要五分钟。不信？请看<a href="http://www.jianshu.com/p/1e402922ee32/" target="_blank" rel="external">Markdown 语法的简要规则</a>。了解这几个规则就足够写出条理清晰、排版美观的博文了。<br>写完博文后，就可以在博客目录下打开命令行窗口，通过<strong>hexo server</strong>启动hexo本地服务，进行文章预览调试，在浏览器输入<strong><a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a></strong>就可以预览效果了。</p>
</li>
<li><p>在将博文部署之前，如果你的博客购买了域名，那么还需要在博客目录的source文件夹下新建一个<strong>CNAME</strong>文件，只需要添加域名上去即可，例如我的域名是little-byte.com，则<strong>CNAME</strong>文件的内容只要添加little-byte.com即可。</p>
</li>
</ul>
<h3 id="将博文部署到Github"><a href="#将博文部署到Github" class="headerlink" title="将博文部署到Ｇithub"></a>将博文部署到Ｇithub</h3><p>在博客目录下打开命令行窗口，输入命令<strong>hexo deploy</strong>即可部署.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo deploy</div></pre></td></tr></table></figure></p>
<p>这时候打开你所绑定的域名或者GitHubPages页面，就可以看到你新写的文章了。</p>
<h2 id="4-更换主题"><a href="#4-更换主题" class="headerlink" title="4.更换主题"></a>4.更换主题</h2><p>Hexo默认的主题是landscape，个人感觉除了背景图比较酷炫之外，其他地方都很一般。所以爱折腾的我就要折腾出自己喜欢的主题。诸多比较之后，选择了YeLee.</p>
<h3 id="NexT主题下载"><a href="#NexT主题下载" class="headerlink" title="NexT主题下载"></a>NexT主题下载</h3><p>进入到博客目录内，然后通过git将NexT主题文件下载到该文件夹内</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone http<span class="variable">s:</span>//github.<span class="keyword">com</span>/MOxFIVE/hexo-theme-yelee.git themes/yelee</div></pre></td></tr></table></figure>
<h3 id="使用NexT主题"><a href="#使用NexT主题" class="headerlink" title="使用NexT主题"></a>使用NexT主题</h3><p>修改网站配置文件_config.yml，将<strong>theme: landscape</strong>改成<strong>theme: Yelee</strong>，只需这么一句话就可以启用Yelee主题了。<br>可以通过 <code>hexo clean &amp;&amp; hexo s</code> 命令来在本地启用调试，查看效果。<br>一般来说，效果类似下图：</p>
<p><img src="http://om2bpqram.bkt.clouddn.com/1488435176017.jpg" alt="enter description here"></p>
<p>然后就可以开始按照自己的喜好进行配置了。YeLee 详细配置文档见此：<a href="http://moxfive.coding.me/yelee/2.Basic-Usage/" target="_blank" rel="external">传送门</a><br><strong>YeLee</strong>说明文档已经说明得非常详细清晰了，这里就不再赘述了。<br>如果搭建过程有疑问，欢迎留言讨论。</p>
]]></content>
      
        <categories>
            
            <category> 博客搭建 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> YeLee </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
